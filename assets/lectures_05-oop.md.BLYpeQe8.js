import{_ as a,c as n,o as e,j as s,af as l,a as t}from"./chunks/framework.HDGmwDL2.js";const g=JSON.parse('{"title":"Classes, Inheritance, and Operator Overloading","description":"","frontmatter":{},"headers":[],"relativePath":"lectures/05-oop.md","filePath":"lectures/05-oop.md","lastUpdated":1755268310000}'),p={name:"lectures/05-oop.md"};function r(h,i,c,o,d,k){return e(),n("div",null,i[0]||(i[0]=[s("h1",{id:"classes-inheritance-and-operator-overloading",tabindex:"-1"},[t("Classes, Inheritance, and Operator Overloading "),s("a",{class:"header-anchor",href:"#classes-inheritance-and-operator-overloading","aria-label":"Permalink to “Classes, Inheritance, and Operator Overloading”"},"​")],-1),s("p",null,"Chapters 10 and 11.",-1),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/vHvPFaCU9-0?rel=0&showinfo=0",title:"CSCI 315",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:"allowfullscreen"})])],-1),l(`<h2 id="intro-to-classes" tabindex="-1">Intro to Classes <a class="header-anchor" href="#intro-to-classes" aria-label="Permalink to “Intro to Classes”">​</a></h2><h3 id="syntax-of-class" tabindex="-1">Syntax of Class <a class="header-anchor" href="#syntax-of-class" aria-label="Permalink to “Syntax of Class”">​</a></h3><ul><li><p>The general syntax for defining a class is</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassIdentifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Class members (variables and functions);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &lt;- Don&#39;t forget the semicolon.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>A class member can be a variable or a function.</p></li></ul><h3 id="syntax-of-class-1" tabindex="-1">Syntax of Class <a class="header-anchor" href="#syntax-of-class-1" aria-label="Permalink to “Syntax of Class”">​</a></h3><ul><li><p>If a member of a class is a variable,</p><ul><li><p>It is declared like any other variable.</p></li><li><p>You cannot initialize a variable when you declare it.</p></li></ul></li><li><p>If a member of a class is a function,</p><ul><li><p>A function prototype declares that member.</p></li><li><p>Function members can <em><strong>directly</strong></em> access any member of the class.</p></li></ul></li></ul><h3 id="class-organization" tabindex="-1">Class Organization <a class="header-anchor" href="#class-organization" aria-label="Permalink to “Class Organization”">​</a></h3><p>Access restrictions for members are set with the following keywords.</p><ul><li><p><code>public</code>: accessible outside the class.</p></li><li><p><code>private</code>: cannot be accessed outside the class.</p></li><li><p><code>protected</code>: access for the class and its subclasses.</p></li><li><p><code>friend</code>: grant member-level access to non-member functions or classes. Use sparingly (or not at all); this reduces encapsulation and increase coupling.</p></li></ul><h3 id="class-organization-1" tabindex="-1">Class Organization <a class="header-anchor" href="#class-organization-1" aria-label="Permalink to “Class Organization”">​</a></h3><ul><li><p>In Java, each member is prefixed with a keyword.</p></li><li><p>In C++,</p><ul><li><p>Each class can have public, private, and protected sections listing members with that access.</p></li><li><p>The <code>friend</code> keyword is placed before a function/class name to indicate its access level.</p></li></ul></li></ul><p>A <strong><code>struct</code></strong> versus a <strong><code>class</code></strong></p><ul><li><p>By default, members of a <code>struct</code> are public.<br> Use the <code>private</code> specifier to make a member private.</p></li><li><p>By default, the members of a <code>class</code> are private.</p></li><li><p>Classes and structs have the same capabilities.</p></li><li><p>Use <code>struct</code> if all member variables of a class are public and especially if there are no member functions (“plain old data”).</p></li></ul><h2 id="member-functions" tabindex="-1">Member Functions <a class="header-anchor" href="#member-functions" aria-label="Permalink to “Member Functions”">​</a></h2><ul><li><p><em><strong>Methods</strong></em> are member functions, which define object behavior.</p></li><li><p>Including only prototypes in class declaration keeps the class smaller and hides the implementation.</p></li></ul><h3 id="example-class" tabindex="-1">Example Class <a class="header-anchor" href="#example-class" aria-label="Permalink to “Example Class”">​</a></h3><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-163" id="tab-164" checked><label data-title="AClass.hpp" for="tab-164">AClass.hpp</label><input type="radio" name="group-163" id="tab-165"><label data-title="AClass.cpp" for="tab-165">AClass.cpp</label></div><div class="blocks"><div class="language-cpp active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A_CLASS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A_CLASS</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Methods</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mSize;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;AClass.hpp&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mSize;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &quot;this&quot; is implied.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // return this-&gt;mSize;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div></div><h3 id="class-file-organization" tabindex="-1">Class File Organization <a class="header-anchor" href="#class-file-organization" aria-label="Permalink to “Class File Organization”">​</a></h3><ul><li><p>Typically, each class declaration is in its own <code>.hpp</code> file.</p><ul><li><p>Avoid including this code multiple times in a program, by using preprocessor directives to check for a unique definition.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-180" id="tab-181" checked><label data-title="MyClass.hpp" for="tab-181">MyClass.hpp</label></div><div class="blocks"><div class="language-cpp active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MY_CLASS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MY_CLASS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div></div></li></ul></li><li><p>The function definitions go in the .cpp file with the matching name and will include the header.<br> e.g., the top of <code>MyClass.cpp</code> has <code>#include &quot;MyClass.hpp&quot;</code>.</p></li></ul><h3 id="types-of-class-methods-member-functions" tabindex="-1">Types of Class Methods (Member Functions) <a class="header-anchor" href="#types-of-class-methods-member-functions" aria-label="Permalink to “Types of Class Methods (Member Functions)”">​</a></h3><ul><li><p><em><strong>Mutator</strong></em> modifies the value(s) of member variable(s).</p></li><li><p><em><strong>Accessor</strong></em> only accesses the value(s) of member variable(s).</p></li><li><p><em><strong>Constant</strong></em> cannot modify the class’s member variables.</p><ul><li><p>The function heading ends with <code>const</code>.</p></li><li><p>Most accessors should be constant.</p></li></ul></li><li><p><em><strong>Static</strong></em> does <strong>not</strong> have access to non-static members.<br> Does not have access to the <code>this</code> pointer.</p></li></ul><h3 id="types-of-member-functions" tabindex="-1">Types of Member Functions <a class="header-anchor" href="#types-of-member-functions" aria-label="Permalink to “Types of Member Functions”">​</a></h3><ul><li><p>Instance methods – accessible through an instantiated object.</p></li><li><p><em><strong>Static</strong></em> methods – accessible using the class name and the scope resolution operator (<code>::</code>).</p><ul><li><p>Use the keyword <code>static</code> to declare a function or variable of a class as static.</p></li><li><p>No object is needed to access a static member.</p></li><li><p>Static methods do not have access not no-static members.</p></li><li><p>All objects of a class share any static member of the class.</p></li></ul></li></ul><h3 id="types-of-member-functions-1" tabindex="-1">Types of Member Functions <a class="header-anchor" href="#types-of-member-functions-1" aria-label="Permalink to “Types of Member Functions”">​</a></h3><ul><li><p>Method <em><strong>overloading</strong></em> – within a class, two methods with the same name but different signatures.</p></li><li><p>Method <em><strong>overriding</strong></em> – same signatures across different classes (subclass and superclass).</p></li></ul><h3 id="the-this-pointer" tabindex="-1">The <code>this</code> Pointer <a class="header-anchor" href="#the-this-pointer" aria-label="Permalink to “The this Pointer”">​</a></h3><ul><li><p>Every object of a class maintains a (hidden) pointer to itself called <code>this</code>.</p></li><li><p>When an object invokes a member function, <code>this</code> is referenced by the member function.</p></li><li><p>Within a member function, <code>this</code> can also be used explicitly.<br><code>this-&gt;member;</code></p></li></ul><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to “Constructors”">​</a></h2><p>A <em><strong>constructor</strong></em> contains code that initializes the object.</p><ul><li><p><em><strong>Default Constructor</strong></em> – Requires no parameters.</p></li><li><p>Parameterized Constructors – Defines the object’s initialization.</p></li><li><p>Constructors are executed automatically.</p></li></ul><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-324" id="tab-325" checked><label data-title="AClass.hpp" for="tab-325">AClass.hpp</label><input type="radio" name="group-324" id="tab-326"><label data-title="AClass.cpp" for="tab-326">AClass.cpp</label></div><div class="blocks"><div class="language-cpp active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Default Constructor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Custom Constructor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // A member field</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mSize;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;AClass.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div><h3 id="invoking-a-constructor" tabindex="-1">Invoking a Constructor <a class="header-anchor" href="#invoking-a-constructor" aria-label="Permalink to “Invoking a Constructor”">​</a></h3><ul><li><p>In Java, a constructor is invoked only through the <code>new</code> keyword because all object variables are references.</p></li><li><p>In C++, a constructor is called upon variable declaration, or explicitly through <code>new</code> with pointers, or in other situations.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Clock myClock;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Invokes the default constructor.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Clock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pClock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Invokes the default constructor</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>You can create and invoke custom constructors.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Clock start{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Invokes a constructor that accepts and int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">3</span><br></div></div></li></ul><h2 id="c-destructor" tabindex="-1">C++ Destructor <a class="header-anchor" href="#c-destructor" aria-label="Permalink to “C++ Destructor”">​</a></h2><ul><li><p>Special method whose signature is a <code>~</code> followed by the name of the class.</p></li><li><p>Particularly if the class contains pointers and the constructor contains calls to new, a destructor needs to be defined.</p></li></ul><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-365" id="tab-366" checked><label data-title="AClass.hpp" for="tab-366">AClass.hpp</label><input type="radio" name="group-365" id="tab-367"><label data-title="AClass.cpp" for="tab-367">AClass.cpp</label></div><div class="blocks"><div class="language-cpp active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Default Constructor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Destructor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ~AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Pointer to a dynamic array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpArr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;AClass.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  : mpArr{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  delete[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpArr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div><h2 id="copying-objects" tabindex="-1">Copying Objects <a class="header-anchor" href="#copying-objects" aria-label="Permalink to “Copying Objects”">​</a></h2><h3 id="control-over-copy-and-assignment-in-c" tabindex="-1">Control Over Copy and Assignment in C++ <a class="header-anchor" href="#control-over-copy-and-assignment-in-c" aria-label="Permalink to “Control Over Copy and Assignment in C++”">​</a></h3><p>The <em><strong>copy constructor</strong></em> and <em><strong>assignment operator</strong></em> define the semantics of <code>a = b</code>.</p><ul><li><p>The <em>copy constructor</em> defines how a <em><strong>new</strong></em> object created as a copy of an existing object (e.g., when function parameters are passed).</p></li><li><p>More low-level control is available (e.g., performing a deep copy instead of a shallow copy).</p><ul><li>Be careful to implement a deep copy if desired.</li></ul></li></ul><h3 id="assignment-operator" tabindex="-1">Assignment Operator <a class="header-anchor" href="#assignment-operator" aria-label="Permalink to “Assignment Operator”">​</a></h3><ul><li><p>The assignment operator (<code>a = b</code>) where object <code>a</code> is an existing object. Means that we are replacing the values in <code>a</code> with a copy of the values in <code>b</code>.</p></li><li><p>Therefore, we must define how this should happen.</p></li><li><p>Doing so requires <em><strong>overloading</strong></em> the assignment operator’s definition when it accepts two objects of our class.</p></li><li><p>We will give a brief introduction to <em><strong>operator overloading</strong></em> here but go in dept on the topic in the next lecture.</p></li></ul><h2 id="operator-overloading" tabindex="-1">Operator Overloading <a class="header-anchor" href="#operator-overloading" aria-label="Permalink to “Operator Overloading”">​</a></h2><ul><li><p>In C++, operators like <code>=</code>, <code>+</code>, <code>*</code>, <code>==</code>, etc. can be defined, just like methods.</p></li><li><p>Example:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Matrix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Matrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Copy constructor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Matrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Matrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // overload + op</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Matrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Matrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // overload = op</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Matrix a, b, c;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // equiv to c = a.operator+(b);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="overloading-the-assignment-operator" tabindex="-1">Overloading the Assignment Operator (<code>=</code>) <a class="header-anchor" href="#overloading-the-assignment-operator" aria-label="Permalink to “Overloading the Assignment Operator (=)”">​</a></h3><ul><li><p>Function prototype:<br><code>const className&amp; operator=(const className&amp;);</code></p></li><li><p>Function definition:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> rightObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // local declaration, if any</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Avoid self-assignment</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rightObject)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Copy rightObject into this object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // return the object assigned</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="overloading-the-stream-insertion-operator" tabindex="-1">Overloading the Stream Insertion Operator (<code>&lt;\`\`&lt;</code>) <a class="header-anchor" href="#overloading-the-stream-insertion-operator" aria-label="Permalink to “Overloading the Stream Insertion Operator (&lt;\`\`&lt;)”">​</a></h3><ul><li><p>Function prototype:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">friend</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Function definition:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> cObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // local declaration, if any</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Output the members of cObject.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // out &lt;&lt; ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // return the stream object.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h3 id="objects-as-function-parameters" tabindex="-1">Objects as Function Parameters <a class="header-anchor" href="#objects-as-function-parameters" aria-label="Permalink to “Objects as Function Parameters”">​</a></h3><ul><li><p>Objects can be passed as parameters to functions and returned as function values.</p></li><li><p>Class objects can be passed by value or by reference.</p></li><li><p>If an object is passed by value, the data members’ values are copied (using the copy constructor).</p><ul><li>Requires additional storage space and a considerable amount of computer time</li></ul></li><li><p><em><strong>Design tip</strong></em>: Use reference parameters to avoid unnecessary copies. Make the parameter <code>const</code> if the function should not modify it.</p></li></ul><h2 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to “Inheritance”">​</a></h2><h3 id="inheritance-vs-composition" tabindex="-1">Inheritance vs. Composition <a class="header-anchor" href="#inheritance-vs-composition" aria-label="Permalink to “Inheritance vs. Composition”">​</a></h3><p>Two common ways to relate two classes in a meaningful way are:</p><ul><li><p><em><strong>Inheritance</strong></em> – an “is-a” relationship.</p></li><li><p><em><strong>Composition</strong></em> or <em><strong>aggregation</strong></em> – a “has-a” relationship.</p></li></ul><h3 id="inheritance-1" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance-1" aria-label="Permalink to “Inheritance”">​</a></h3><ul><li><p>Feature that allows a class to be defined based on another class.</p><ul><li>Methods and attributes are inherited.</li></ul></li><li><p>Java and C++ difference</p></li><li><p>Multiple inheritance possible in C++, not in Java.</p></li><li><p>But in Java, one may implement several interfaces.</p></li></ul><h3 id="static-vs-dynamic-binding" tabindex="-1">Static vs. Dynamic Binding <a class="header-anchor" href="#static-vs-dynamic-binding" aria-label="Permalink to “Static vs. Dynamic Binding”">​</a></h3><ul><li><p>Let <code>Teacher</code> be a subclass of <code>Employee</code></p><ul><li>Also, suppose <code>promote()</code> is a method defined in both classes.</li></ul></li><li><p>Employee variables can refer to Teachers</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Java</strong></td><td style="text-align:left;"><strong>C++</strong></td></tr><tr><td style="text-align:left;"><code>Employee emp;</code></td><td style="text-align:left;"><code>Employee *emp;</code></td></tr><tr><td style="text-align:left;"><code>emp = new Teacher();</code></td><td style="text-align:left;"><code>emp = new Teacher;</code></td></tr><tr><td style="text-align:left;"><code>emp.promote();</code></td><td style="text-align:left;"><code>emp-&gt;promote();</code></td></tr></tbody></table></li><li><p>Is the Employee’s or the Teachers’ <code>promote()</code> method called?</p></li><li><p>In C++, Employee’s <code>promote()</code> is called.</p><ul><li>As determined at compile time and deduced from the type of the variable (static binding).</li></ul></li><li><p>In Java, Teacher’s <code>promote()</code> is called.</p><ul><li>As determined at run-time, because the actual type of the referred object is checked then (dynamic binding)</li></ul></li></ul><h3 id="static-vs-dynamic-binding-1" tabindex="-1">Static vs. Dynamic Binding <a class="header-anchor" href="#static-vs-dynamic-binding-1" aria-label="Permalink to “Static vs. Dynamic Binding”">​</a></h3><ul><li><p>A function can be declared <em>virtual</em> to use dynamic binding instead of static.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>With inheritance, it is a good idea to make the destructors virtual to ensure that the child object’s memory is freed.</p></li></ul><h3 id="design-principles" tabindex="-1">Design Principles <a class="header-anchor" href="#design-principles" aria-label="Permalink to “Design Principles”">​</a></h3><ul><li><p><em><strong>Encapsulation</strong></em>: combines data and operations on data in a single unit.</p></li><li><p><em><strong>Inheritance</strong></em>: creates new objects (classes) from existing objects (classes).</p></li><li><p><em><strong>Polymorphism</strong></em>: the ability to use the same expression to denote different operations.</p></li></ul><h3 id="static-vs-dynamic-polymorphism" tabindex="-1">Static vs. Dynamic Polymorphism <a class="header-anchor" href="#static-vs-dynamic-polymorphism" aria-label="Permalink to “Static vs. Dynamic Polymorphism”">​</a></h3><ul><li><p>Inheritance provides the ability to change types at runtime (though subclasses).</p></li><li><p>Templates provide the ability to change types at compile time.</p><ul><li>We will learn more about templates in the next set of slides (Chapter 13).</li></ul></li></ul><h3 id="there-is-more" tabindex="-1">There is more. <a class="header-anchor" href="#there-is-more" aria-label="Permalink to “There is more.”">​</a></h3><ul><li><p>We have quickly skimmed the material in Chapters 10 – 11 in this lecture.</p></li><li><p>Reference the textbook for details and examples.</p></li></ul>`,65)]))}const u=a(p,[["render",r]]);export{g as __pageData,u as default};
