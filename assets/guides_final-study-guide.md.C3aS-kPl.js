import{_ as i,c as a,o as t,af as l}from"./chunks/framework.BCStJt3n.js";const h=JSON.parse('{"title":"Final Exam Study Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guides/final-study-guide.md","filePath":"guides/final-study-guide.md","lastUpdated":1755268310000}'),r={name:"guides/final-study-guide.md"};function o(s,e,n,d,p,c){return t(),a("div",null,e[0]||(e[0]=[l('<h1 id="final-exam-study-guide" tabindex="-1">Final Exam Study Guide <a class="header-anchor" href="#final-exam-study-guide" aria-label="Permalink to “Final Exam Study Guide”">​</a></h1><p>See <a href="/csci-315/syllabus#tentative-weekly-schedule">the syllabus</a> for the deadline.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>In-person students must take the exam in class during the last class period and the official exam time.</p></div><p>This exam shall have 2 sections, each worth 50%:</p><ol><li><p>a GitHub/Auto-Grader with multiple problems and</p></li><li><p>a Blackboard section.</p></li></ol><p>Both sections will be timed and cannot be paused. Blackboard will allow you to reconnect if you lose your connection. Each Auto-Graded problem will have a separate time limit, as stated in its instructions.</p><p>The final will consist of programming problems and stepping through the iterations of algorithms (showing the state at each step). Big O will also be a significant topic during your final. Your Auto-Grader grade is based on the percentage of passing test cases.</p><h2 id="included-topics" tabindex="-1">Included Topics <a class="header-anchor" href="#included-topics" aria-label="Permalink to “Included Topics”">​</a></h2><ol><li><p><strong>Data Structures</strong>:</p><ul><li><p>Arrays</p></li><li><p>Linked List (singly- and doubly-linked)</p></li><li><p>Vectors, Stack, Queue, Circular Buffer</p></li><li><p>Trees:</p><ul><li>Binary Search Tree (Ordered Sets, Ordered Maps)</li><li>Heaps</li><li>Priority Queues</li><li>B-trees</li><li>Quadtrees</li></ul></li><li><p>Hash Tables implemented via Chaining and Linear Probing: (a.k.a., Unordered Set, Unordered Map,)</p></li><li><p>Graphs (Adjacency List, Adjacency Matrix)</p><ul><li>Types: Directed, Undirected, Simple (no loops or parallel edges), and Strongly-Connected (all vertices are connected)</li></ul></li></ul></li><li><p><strong>Algorithms</strong>:</p><ul><li><p>Sorting: Bubble, Selection, Insertion, Quick, Merge, Heap</p></li><li><p>Searching: Linear, Binary, Depth-first search (DFS), Breadth-first search (BFS)</p></li><li><p>Traversing: preorder, inorder, postorder</p></li><li><p>Graphs: DFS, BFS, Dijkstra&#39;s Shortest Path, Prim&#39;s Minimum Spanning Tree</p></li><li><p>Deleting and inserting into each data structure</p></li><li><p>Copy constructor for each data structure</p></li></ul></li><li><p><strong>Other</strong>:</p><ul><li><p>Compare/contrast, with <em>space complexity</em> and <em>runtime complexity</em> in Big-O notation.</p></li><li><p>Know what each data structure does and how it does it.</p></li><li><p>Recursive and iterative solutions to the above algorithms</p></li><li><p>Function pointers and function objects</p></li><li><p>Memory Allocation: Dynamic/Heap, Stack, and Static memory</p></li><li><p>Templates</p></li><li><p>Operator Overloading</p></li></ul></li></ol><h2 id="example-question" tabindex="-1">Example Question <a class="header-anchor" href="#example-question" aria-label="Permalink to “Example Question”">​</a></h2><p>You may reference the <a href="./midterm-study-guide">Midterm Study Guide</a> for example questions. The format will be very similar.</p><p>I have provided an example problem in the <code>exam2-0/</code> directory that you can try before starting the real exam problems. Use it to understand the procedure before you focus on problem-solving when timed.</p>',12)]))}const m=i(r,[["render",o]]);export{h as __pageData,m as default};
