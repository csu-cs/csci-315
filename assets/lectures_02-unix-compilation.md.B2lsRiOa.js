import{_ as e,c as n,o as l,af as a,j as s,aG as t,aH as r,aI as p,aJ as h,aK as o,aL as d}from"./chunks/framework.BCStJt3n.js";const E=JSON.parse('{"title":"C++ Development in Linux","description":"","frontmatter":{},"headers":[],"relativePath":"lectures/02-unix-compilation.md","filePath":"lectures/02-unix-compilation.md","lastUpdated":1755268310000}'),c={name:"lectures/02-unix-compilation.md"};function k(g,i,u,m,b,y){return l(),n("div",null,i[0]||(i[0]=[a('<h1 id="c-development-in-linux" tabindex="-1">C++ Development in Linux <a class="header-anchor" href="#c-development-in-linux" aria-label="Permalink to “C++ Development in Linux”">​</a></h1><h2 id="learning-outcomes" tabindex="-1">Learning Outcomes <a class="header-anchor" href="#learning-outcomes" aria-label="Permalink to “Learning Outcomes”">​</a></h2><p>After studying this lecture, students should be able to:</p><ul><li><p>Linux Philosophy</p><ul><li>Describe the core principles of the Unix/Linux philosophy.</li><li>Identify and navigate the Linux file system hierarchy.</li><li>Explain the purpose of regular files, directories, and device files in Linux.</li></ul></li><li><p>C++ Software Development</p><ul><li>Explain the purpose and role of a compiler.</li><li>Describe the stages of the compilation process in C/C++.</li><li>Interpret and use basic <code>g++</code> command-line options.</li><li>Differentiate between source files, object files, and executables for modularized code.</li><li>Understand the benefits of separating interface (header) with guards and implementation (source) files.</li><li>Use make and basic Makefile rules to automating multi-file C++ compilation tasks.</li><li>Diagnose common compiler and linker errors using output messages.</li></ul></li></ul>',4),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/0Tfb_EXSrAo?rel=0&showinfo=0",title:"CSCI 315",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:"allowfullscreen"})])],-1),a('<h2 id="linux-philosophy" tabindex="-1">Linux Philosophy <a class="header-anchor" href="#linux-philosophy" aria-label="Permalink to “Linux Philosophy”">​</a></h2><h3 id="the-linux-file-structure-and-inodes" tabindex="-1">The Linux File Structure and Inodes <a class="header-anchor" href="#the-linux-file-structure-and-inodes" aria-label="Permalink to “The Linux File Structure and Inodes”">​</a></h3><ul><li><p>In Linux, <a href="https://en.wikipedia.org/wiki/Everything_is_a_file" target="_blank" rel="noreferrer">everything is a file</a>! Well, almost.</p></li><li><p>Drives, ports, devices (e.g., printers) are file descriptors.</p></li><li><p>A file has a name and an <a href="https://en.wikipedia.org/wiki/Inode" target="_blank" rel="noreferrer"><em><strong>inode</strong></em> (index node)</a> that stores its metadata or “administrative information.”</p><ul><li><p>creation/modification date</p></li><li><p>permissions</p></li><li><p>properties are stored in the file’s inode</p></li><li><p>a special block of data in the file system</p></li><li><p>contains administrative information</p></li><li><p>contains the length of the file</p></li><li><p>where on the disk it’s stored</p></li></ul></li></ul><h3 id="directories" tabindex="-1">Directories <a class="header-anchor" href="#directories" aria-label="Permalink to “Directories”">​</a></h3><ul><li><p>Directories (a.k.a. folders) are also files.</p></li><li><p>A directory is a file that holds the <em><strong>inode</strong></em> (index node) numbers and names of other files.</p></li><li><p>Each directory entry is a link to a file’s inode; remove the filename and you remove the link.</p></li><li><p>You can see the inode number for a file by using <code>ls -i</code>.</p></li><li><p>If the last link to a file is deleted, the inode and the referenced data and are marked as free (soft delete).</p></li><li><p>This allows deletion when there are multiple hard links to the same file to be managed correctly.</p></li></ul><p>Files are arranged in directories, which may contain sub-directories.</p><table tabindex="0"><thead><tr><th style="text-align:left;">Directory</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>/</code></td><td style="text-align:left;">Contains all of the system’s files in directories.</td></tr><tr><td style="text-align:left;"><code>/home</code></td><td style="text-align:left;">Contains a sub-directory for each user’s home.</td></tr><tr><td style="text-align:left;"><code>/bin</code></td><td style="text-align:left;">System programs (“binaries”)</td></tr><tr><td style="text-align:left;"><code>/etc</code></td><td style="text-align:left;">System configuration files</td></tr><tr><td style="text-align:left;"><code>/lib</code></td><td style="text-align:left;">System libraries</td></tr><tr><td style="text-align:left;"><code>/dev</code></td><td style="text-align:left;">Physical devices and device interfaces</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><figure class="light-only"><img src="'+t+'" alt="Example Directories Tree" width="300px" class="light-only"><figcaption>Example Directories Tree</figcaption></figure><figure class="dark-only"><img src="'+r+`" alt="Example Directories Tree" width="300px" class="dark-only"><figcaption>Example Directories Tree</figcaption></figure><h3 id="files-and-devices" tabindex="-1">Files and Devices <a class="header-anchor" href="#files-and-devices" aria-label="Permalink to “Files and Devices”">​</a></h3><ul><li><p>Even hardware devices are very often represented (mapped) by files.</p></li><li><p>You can mount a CD-ROM drive as a file:</p><ul><li><p><code>mount -t iso9660 /dev/sr0 /mnt/cdrom</code></p></li><li><p><code>cd /mnt/cdrom</code> # navigate to the mounded drive</p></li></ul></li><li><p>You can mount a USB drive as a file:</p><ul><li><p><code>mkdir /media/usb-drive</code> # Make a folder ot be the mount point.</p></li><li><p><code>fdisk -l</code> # look at list of available drives</p></li><li><p><code>mount /dev/sdc1 /media/usb-drive/</code></p></li><li><p><code>cd /media/usb-drive</code></p></li></ul></li></ul><h3 id="dev-console" tabindex="-1"><code>/dev/console</code> <a class="header-anchor" href="#dev-console" aria-label="Permalink to “/dev/console”">​</a></h3><ul><li><p>This device represents the system console.</p></li><li><p>Error messages and diagnostics are often sent to this device.</p></li><li><p>On Linux, it’s usually the “active” virtual console.</p></li></ul><h3 id="dev-tty" tabindex="-1"><code>/dev/tty</code> <a class="header-anchor" href="#dev-tty" aria-label="Permalink to “/dev/tty”">​</a></h3><ul><li><p>The special file <code>/dev/tty</code> is an alias for the controlling terminal of a process.</p><ul><li><p>keyboard</p></li><li><p>screen</p></li><li><p>window</p></li></ul></li><li><p><code>/dev/tty</code> allows a program to write directly to the user, without regard to which pseudo-terminal or hardware terminal the user is using.</p></li></ul><h3 id="dev-null" tabindex="-1">/dev/null <a class="header-anchor" href="#dev-null" aria-label="Permalink to “/dev/null”">​</a></h3><ul><li><p>This is the null device.</p></li><li><p>All output written to this device is discarded.</p></li><li><p>Unwanted output (a.k.a., a student’s email complaint/rant) is often redirected to <code>/dev/null</code>.</p></li><li><p><code>echo I do not want to see this. &gt; /dev/null</code></p></li><li><p><code>cp /dev/null empty_file</code></p></li></ul><h2 id="compilation" tabindex="-1">Compilation <a class="header-anchor" href="#compilation" aria-label="Permalink to “Compilation”">​</a></h2><h3 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to “Introduction”">​</a></h3><p>As a programmer or system administrator, you should know how to program under Linux.</p><p>We are going to learn how to use:</p><ul><li><code>g++</code> to compile a C++ program under Linux.</li><li><code>gdb</code> and <code>ddd</code> to debug.</li><li><code>make</code> to automate compilation.</li><li><code>valgrind</code> to perform memory analysis.</li><li><code>gnuplot</code> to create performance graphs.</li><li><code>perf</code> to identify performance issues (time permitting).</li></ul><h3 id="compiling-c-programs" tabindex="-1">Compiling C++ Programs <a class="header-anchor" href="#compiling-c-programs" aria-label="Permalink to “Compiling C++ Programs”">​</a></h3><p>We start with the simple case of a single source-code file.</p><p>Create a <code>.cpp</code> file similar to the one listed here.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, World!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="compile" tabindex="-1">Compile <a class="header-anchor" href="#compile" aria-label="Permalink to “Compile”">​</a></h3><ul><li><p>Compile using<br><code>g++ test.cpp</code></p></li><li><p>What file is generated?</p></li><li><p>Name your compiled executable by using<br><code>g++ test.cpp -o test</code></p></li><li><p>Run the generated executable file.<br><code>./test</code></p></li></ul><h3 id="creating-debug-ready-code" tabindex="-1">Creating Debug Ready Code <a class="header-anchor" href="#creating-debug-ready-code" aria-label="Permalink to “Creating Debug Ready Code”">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>The <code>-g</code> flag tells the compiler to use debug info.</p></li><li><p>The compile file size is much larger.</p></li><li><p>We may still remove this debug information using the strip command.<br><code>strip test</code></p></li></ul><h3 id="sanitizers-for-better-runtime-error-detection" tabindex="-1">Sanitizers for Better Runtime Error Detection <a class="header-anchor" href="#sanitizers-for-better-runtime-error-detection" aria-label="Permalink to “Sanitizers for Better Runtime Error Detection”">​</a></h3><p>The following add additional run-time checking.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsanitize=return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsanitize=undefined</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsanitize=address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>-fsanitize=return</code> Shows error when returning without a value from non-void function.</li><li><code>-fsanitize=undefined</code> Detects some undefined behaviors.</li><li><code>-fsanitize=address</code> Detects memory addressability issues.</li></ul><p>See all options at <a href="https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html" target="_blank" rel="noreferrer">https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html</a></p><h3 id="adding-optimizations" tabindex="-1">Adding Optimizations <a class="header-anchor" href="#adding-optimizations" aria-label="Permalink to “Adding Optimizations”">​</a></h3><ul><li><p>The compiler can help improve the performance of your code via optimizations.</p></li><li><p><code>g++ -O test.cpp -o test</code></p></li><li><p>The <code>-O</code> flag tells the compiler to optimize the code.</p></li><li><p>Usually can define an optimization level by adding a number to the <code>-O</code> flag.</p></li></ul><h3 id="getting-extra-compiler-warnings" tabindex="-1">Getting Extra Compiler Warnings <a class="header-anchor" href="#getting-extra-compiler-warnings" aria-label="Permalink to “Getting Extra Compiler Warnings”">​</a></h3><ul><li><p><em><strong>Error messages</strong></em> – Erroneous code that does not comply with the C++ standard.</p></li><li><p><em><strong>Warnings</strong></em> – Codes that usually tend to cause errors during runtime.</p></li><li><p>To receive extra compiler warnings, use the <code>-Wall -Wextra</code> arguments.<br><code>g++ -Wall -Wextra test.cpp -o test</code></p><ul><li><p>Useful to improve the quality of our source code</p></li><li><p>Expose bugs that will really bug us later</p></li></ul></li></ul><h3 id="even-more-compiler-warnings" tabindex="-1">Even More Compiler Warnings <a class="header-anchor" href="#even-more-compiler-warnings" aria-label="Permalink to “Even More Compiler Warnings”">​</a></h3><div class="language-Bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wall</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wextra</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wpedantic</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wconversion</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wshadow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>-Wall</code> all the warnings about constructions that some users consider questionable, and that are easy to avoid</li><li><code>-Wextra</code> some extra warning flags that are not enabled by <code>-Wall</code></li><li><code>-Wpedantic</code> warnings demanded by strict ISO C++</li><li><code>-Wconversion</code> implicit conversions that may alter a value</li><li><code>-Wshadow</code> whenever a local variable or type declaration shadows another variable, parameter, type, class member, etc.</li></ul><p>See all options at <a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html" target="_blank" rel="noreferrer">https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html</a></p><h3 id="compiling-multi-source-programs" tabindex="-1">Compiling Multi-Source Programs <a class="header-anchor" href="#compiling-multi-source-programs" aria-label="Permalink to “Compiling Multi-Source Programs”">​</a></h3><ul><li><p>Compile them with:</p><ul><li><code>g++ main.cpp a.cpp b.cpp -o hello</code></li></ul></li><li><p>Comments:</p><ul><li><p>If external symbols are needed, use the <code>extern</code> keyword.</p></li><li><p>Source file order becomes important.</p></li><li><p>As program size increases, so does compilation time.</p></li></ul></li></ul><figure class="light-only"><img src="`+p+'" alt="Processing a C++ Program" width="350px" class="light-only"><figcaption>Processing a C++ Program</figcaption></figure><figure class="dark-only"><img src="'+h+`" alt="Processing a C++ Program" width="350px" class="dark-only"><figcaption>Processing a C++ Program</figcaption></figure><h3 id="selective-recompilation-after-isolated-changes" tabindex="-1">Selective Recompilation After Isolated Changes <a class="header-anchor" href="#selective-recompilation-after-isolated-changes" aria-label="Permalink to “Selective Recompilation After Isolated Changes”">​</a></h3><ul><li><p>With the previous command, all source files are always recompiled, even when only one of them changed.</p></li><li><p>To overcome, we compile in multiple steps.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.cpp</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Create main.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.cpp</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Create a.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.cpp</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Create b.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # link files</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><code>-c</code> tells the compiler to only create an object file.</p></li><li><p>The final command links the objects into an executable.</p></li></ul><h2 id="makefile" tabindex="-1">Makefile <a class="header-anchor" href="#makefile" aria-label="Permalink to “Makefile”">​</a></h2><h3 id="automating-program-compilation" tabindex="-1">Automating Program Compilation <a class="header-anchor" href="#automating-program-compilation" aria-label="Permalink to “Automating Program Compilation”">​</a></h3><ul><li><p>A <em><strong>makefile</strong></em> is a collection of instructions that should be used to compile your program.</p></li><li><p>Once you modify some source files, and type the command <code>make</code> (or <code>gmake</code> if using GNU’s make), your program will be recompiled using as few compilation commands as possible.</p></li></ul><h3 id="makefile-structure" tabindex="-1">Makefile Structure <a class="header-anchor" href="#makefile-structure" aria-label="Permalink to “Makefile Structure”">​</a></h3><ul><li><p>Variable Definitions – Define values for variables for reuse.</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS  = -Wall -Wextra -Wconversion -Wshadow -Wpedantic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS += -g -fsanitize=return -fsanitize=undefined -fsanitize=address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SRCS = main.cpp file1.cpp file2.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC = g++</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="makefile-structure-1" tabindex="-1">Makefile Structure <a class="header-anchor" href="#makefile-structure-1" aria-label="Permalink to “Makefile Structure”">​</a></h3><ul><li><p>Dependency Rules – Define the conditions a given file needs to be recompiled, and how to compile it.</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g++ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c main.cpp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>Recompile if any of the files after a <code>:</code> change.</p></li><li><p>You <em>must</em> use hard tabs in makefiles! (Spaces will NOT work.)</p></li><li><p><code># is a comment</code></p></li></ul></li></ul><h3 id="single-source-makefile-example" tabindex="-1">Single Source Makefile Example <a class="header-anchor" href="#single-source-makefile-example" aria-label="Permalink to “Single Source Makefile Example”">​</a></h3><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># First,  list your variable(s)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC = g++</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># First rule, which creates the program.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    By convention, the first rule is usually all.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># compiling the source file, main.o depends on main.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.cpp</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -g -Wall -Wextra -c main.cpp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \${CC} uses the value of CC variable, case sensitive</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># linking the program, the program name is main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.o</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -g main.o -o main</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cleaning everything that can be recreated with &quot;make&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (basically, objects, the executable, and temp files).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rm -f main main.o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="multi-source-file-example" tabindex="-1">Multi-Source-File Example <a class="header-anchor" href="#multi-source-file-example" aria-label="Permalink to “Multi-Source-File Example”">​</a></h3><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS = -g -Wall -Wextra -Wconversion -Wshadow -Wpedantic</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Top-level rule to compile the whole program.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: prog</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The program is made of several source files.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.o file1.o file2.o</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g++ main.o file1.o file2.o -o prog</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rule for file &quot;main.o&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.c file1.h file2.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g++ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c main.cpp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rule for file &quot;file1.o&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file1.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: file1.c file1.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g++ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c file1.cpp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rule for file &quot;file2.o&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file2.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: file2.cpp file2.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g++ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c file2.cpp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rule for cleaning files generated during compilations.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rm -f prog main.o file1.o file2.o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="phony-targets" tabindex="-1">Phony Targets <a class="header-anchor" href="#phony-targets" aria-label="Permalink to “Phony Targets”">​</a></h3><ul><li><p>Make assumes that all the targets are files.</p></li><li><p>We may want to run commands that do not represent files.</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rule for cleaning files generated during compilations.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rm -f prog main.o file1.o file2.o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>We can identify special targets that are not files.</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Allow the clean target to run even if there is a file named &quot;clean&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.PHONY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: clean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="how-can-we-put-the-object-files-in-a-sub-directory" tabindex="-1">How can we put the object files in a sub-directory? <a class="header-anchor" href="#how-can-we-put-the-object-files-in-a-sub-directory" aria-label="Permalink to “How can we put the object files in a sub-directory?”">​</a></h3><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Make an object folder and put a .gitignore file in it.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mkdir obj &amp;&amp; echo *.o &gt; obj/.gitignore</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The thing to the right of | is an order-only rule</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obj/main.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.cpp | obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g++ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c main.cpp -o obj/main.o</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obj/a.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : a.cpp | obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g++ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c a.cpp -o obj/a.o</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obj/b.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : b.cpp | obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g++ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c b.cpp -o obj/b.o</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: obj/main.o obj/a.o obj/b.o</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g++ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CPPFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj/main.o obj/a.o obj/b.o -o main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="multi-source-make" tabindex="-1">Multi-Source Make <a class="header-anchor" href="#multi-source-make" aria-label="Permalink to “Multi-Source Make”">​</a></h3><ul><li><p>Commands can be anything; usually they are g++ to compile or link.</p></li><li><p>Commands can be multiline, use tabs</p></li><li><p>Other tools:</p><ul><li><code>makedepend</code> Finds dependencies for your program.</li><li><code>configure</code> Finds libraries your program make need.</li></ul></li><li><p>We are going to focus only on <code>make</code> for this class.</p></li></ul><h2 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to “System Architecture”">​</a></h2><h3 id="system-calls-and-device-drivers" tabindex="-1">System Calls And Device Drivers <a class="header-anchor" href="#system-calls-and-device-drivers" aria-label="Permalink to “System Calls And Device Drivers”">​</a></h3><ul><li><p>System calls access and control files and devices.</p></li><li><p>At the heart of the operating system, the kernel, are some device drivers.</p></li><li><p>The low-level functions used to access the device drivers, the system calls, include:</p><ul><li><code>open</code> Open a file or device</li><li><code>read</code> Read from an open file or device</li><li><code>write</code> Write to a file or device</li><li><code>close</code> Close the file or device</li><li><code>ioctl</code> Pass control information to a device driver</li></ul></li></ul><h3 id="system-calls-and-device-drivers-1" tabindex="-1">System Calls And Device Drivers <a class="header-anchor" href="#system-calls-and-device-drivers-1" aria-label="Permalink to “System Calls And Device Drivers”">​</a></h3><p>Using low-level system calls directly for input and<br> output can be very inefficient.</p><ul><li><p>Why?</p><ul><li><p>Performance penalty in making a system call.</p></li><li><p>The hardware has limitations</p></li></ul></li><li><p>Standard libraries provide a higher-level interface to devices and disk files.</p></li></ul><figure class="light-only"><img src="`+o+'" alt="System Calls" width="300px" class="light-only"><figcaption>Programs generally run in user space and use libraries to make system class that are handled by the operating system kernel. They operating system may then use device drivers to interact with hardware.</figcaption></figure><figure class="dark-only"><img src="'+d+`" alt="System Calls" width="300px" class="dark-only"><figcaption>Programs generally run in user space and use libraries to make system class that are handled by the operating system kernel. They operating system may then use device drivers to interact with hardware.</figcaption></figure><h2 id="valgrind" tabindex="-1">Valgrind <a class="header-anchor" href="#valgrind" aria-label="Permalink to “Valgrind”">​</a></h2><h3 id="what-is-valgrind" tabindex="-1">What is Valgrind? <a class="header-anchor" href="#what-is-valgrind" aria-label="Permalink to “What is Valgrind?”">​</a></h3><ul><li><p>A tool to perform:</p><ul><li><p>memory debugging,</p></li><li><p>memory leak detection, and</p></li><li><p>memory profiling.</p></li></ul></li><li><p>Valgrind accomplishes this by running your program inside of its virtual machine and capturing all your memory accesses/requests.</p></li></ul><h3 id="memory-debugging-a-successful-run" tabindex="-1">Memory Debugging: A Successful Run <a class="header-anchor" href="#memory-debugging-a-successful-run" aria-label="Permalink to “Memory Debugging: A Successful Run”">​</a></h3><div class="language-plain line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>==2231== Memcheck, a memory error detector</span></span>
<span class="line"><span>==2231== Copyright (C) 2002-2013, and GNU GPL&#39;d, by Julian Seward et al.</span></span>
<span class="line"><span>==2231== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info</span></span>
<span class="line"><span>==2231== Command: ./a.out</span></span>
<span class="line"><span>==2231==</span></span>
<span class="line"><span>==2231==</span></span>
<span class="line"><span>==2231== HEAP SUMMARY:</span></span>
<span class="line"><span>==2231==     in use at exit: 0 bytes in 0 blocks</span></span>
<span class="line"><span>==2231==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated</span></span>
<span class="line"><span>==2231==</span></span>
<span class="line"><span>==2231== All heap blocks were freed -- no leaks are possible</span></span>
<span class="line"><span>==2231==</span></span>
<span class="line"><span>==2231== For counts of detected and suppressed errors, rerun with: -v</span></span>
<span class="line"><span>==2231== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li><p>Notice Valgrind keeps track of:</p><ul><li><p>(heap) memory used on exit</p></li><li><p>How much heap memory was allocated &amp; deallocated.</p></li><li><p>How many memory errors (out-of-bounds memory access) were detected.</p></li></ul></li><li><p><code>2231</code> is the process ID, which is unimportant for this course.</p></li></ul><h3 id="memory-leak-detection" tabindex="-1">Memory Leak Detection <a class="header-anchor" href="#memory-leak-detection" aria-label="Permalink to “Memory Leak Detection”">​</a></h3><p>Consider this obvious memory leak:</p><div class="language-c++ line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.cpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valgrind</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./a.out</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-plain line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>==2476== HEAP SUMMARY:</span></span>
<span class="line"><span>==2476==     in use at exit: 4,096 bytes in 1 blocks</span></span>
<span class="line"><span>==2476==   total heap usage: 1 allocs, 0 frees, 4,096 bytes allocated</span></span>
<span class="line"><span>==2476==</span></span>
<span class="line"><span>==2476== LEAK SUMMARY:</span></span>
<span class="line"><span>==2476==    definitely lost: 4,096 bytes in 1 blocks</span></span>
<span class="line"><span>==2476==    indirectly lost: 0 bytes in 0 blocks</span></span>
<span class="line"><span>==2476==      possibly lost: 0 bytes in 0 blocks</span></span>
<span class="line"><span>==2476==    still reachable: 0 bytes in 0 blocks</span></span>
<span class="line"><span>==2476==         suppressed: 0 bytes in 0 blocks</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><p><em><strong>Definitely lost</strong></em> means we lost</p></li><li><p><em><strong>Indirectly lost</strong></em> means, we lost and it could be hard to find.</p></li><li><p><em><strong>Possibly lost</strong></em> means Valgrind was not able to determine if the memory was deallocated or not.</p></li><li><p><em><strong>Still reachable</strong></em> means you have a dangling pointer.</p></li></ul><h3 id="memory-usage-detection" tabindex="-1">Memory Usage detection <a class="header-anchor" href="#memory-usage-detection" aria-label="Permalink to “Memory Usage detection”">​</a></h3><p>A better version:</p><div class="language-c++ line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  delete[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ints;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.cpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valgrind</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./a.out</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-plain line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>==2591== HEAP SUMMARY:</span></span>
<span class="line"><span>==2591==     in use at exit: 0 bytes in 0 blocks</span></span>
<span class="line"><span>==2591==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated</span></span>
<span class="line"><span>==2591==</span></span>
<span class="line"><span>==2591== All heap blocks were freed -- no leaks are possible</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Notice that Valgrind can tell us how much heap memory we are using even though we freed (deallocated) it.</p><h3 id="memory-access-error-detection" tabindex="-1">Memory Access Error Detection <a class="header-anchor" href="#memory-access-error-detection" aria-label="Permalink to “Memory Access Error Detection”">​</a></h3><p>Now let’s use Valgrind to detect an off-by-one memory error.</p><div class="language-c++ line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ints[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  delete[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ints;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Do you see the error?</p><div class="language-plain line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>==2615== Invalid write of size 4</span></span>
<span class="line"><span>==2615==    at 0x400673: main (in ~/t/a.out)</span></span>
<span class="line"><span>==2615==  Address 0x5a03040 is 0 bytes after a block of size 4,096 alloc&#39;d</span></span>
<span class="line"><span>==2615==    at 0x4C298A0: operator new[](unsigned long) (vg_replace_malloc.c:389)</span></span>
<span class="line"><span>==2615==    by 0x40064E: main (in ~/t/a.out)</span></span>
<span class="line"><span>==2615==</span></span>
<span class="line"><span>==2615==</span></span>
<span class="line"><span>==2615== HEAP SUMMARY:</span></span>
<span class="line"><span>==2615==     in use at exit: 0 bytes in 0 blocks</span></span>
<span class="line"><span>==2615==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Well that tells us the error, but where is it?</p><h3 id="getting-a-little-more-help" tabindex="-1">Getting A Little More Help <a class="header-anchor" href="#getting-a-little-more-help" aria-label="Permalink to “Getting A Little More Help”">​</a></h3><p>Compile with debug flags (<code>-g</code>)!</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valgrind</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./a.out</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-plain line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>==2634== Invalid write of size 4</span></span>
<span class="line"><span>==2634==    at 0x400673: main (test.c:7)</span></span>
<span class="line"><span>==2634==  Address 0x5a03040 is 0 bytes after a block of size 4,096 alloc&#39;d</span></span>
<span class="line"><span>==2634==    at 0x4C298A0: operator new[](unsigned long) (vg_replace_malloc.c:389)</span></span>
<span class="line"><span>==2634==    by 0x40064E: main (test.c:4)</span></span>
<span class="line"><span>==2634==</span></span>
<span class="line"><span>==2634==</span></span>
<span class="line"><span>==2634== HEAP SUMMARY:</span></span>
<span class="line"><span>==2634==     in use at exit: 0 bytes in 0 blocks</span></span>
<span class="line"><span>==2634==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated</span></span>
<span class="line"><span>==2634==</span></span>
<span class="line"><span>==2634== All heap blocks were freed -- no leaks are possible</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to “Conclusion”">​</a></h3><ul><li><p>Valgrind can be used to detect memory leaks and memory access errors.</p></li><li><p>Valgrind provides other tools to profile memory usage and cache usage, but those are beyond the scope of this class.</p></li><li><p>Why doesn’t C++ does not have built-in memory debugging like Java?</p></li></ul><h2 id="in-the-future" tabindex="-1">In the Future <a class="header-anchor" href="#in-the-future" aria-label="Permalink to “In the Future”">​</a></h2><h3 id="gnuplot-generates-simple-graphs" tabindex="-1">Gnuplot: Generates Simple Graphs <a class="header-anchor" href="#gnuplot-generates-simple-graphs" aria-label="Permalink to “Gnuplot: Generates Simple Graphs”">​</a></h3><p>Gnuplot command-line graphing utility for Linux.</p><p>We will use it soon to observe the performance of our data structures and algorithms.</p><h2 id="lab-02" tabindex="-1">Lab 02 <a class="header-anchor" href="#lab-02" aria-label="Permalink to “Lab 02”">​</a></h2><h3 id="git-adding-an-upstream-repository" tabindex="-1">Git: Adding an Upstream Repository <a class="header-anchor" href="#git-adding-an-upstream-repository" aria-label="Permalink to “Git: Adding an Upstream Repository”">​</a></h3><p>Is your forked repository missing the updates<br> from the course repository?</p><h3 id="git-adding-an-upstream-repository-1" tabindex="-1">Git: Adding an Upstream Repository <a class="header-anchor" href="#git-adding-an-upstream-repository-1" aria-label="Permalink to “Git: Adding an Upstream Repository”">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># See your current remote repositories</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add the course repository as a remote repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/csu-cs/CSCI-315-2025-Spring.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set the merging method for divergent branches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull.rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # merge</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Get the latest updates for the class repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Save these changes on your GitHub fork</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,114)]))}const F=e(c,[["render",k]]);export{E as __pageData,F as default};
