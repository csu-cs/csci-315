import{_ as a,c as t,o,j as e,af as l,a as n,bk as r,bl as d,bm as s,bn as p,bo as c,bp as g,bq as h,br as u,bs as b,bt as f,bu as m,bv as k,bw as w,bx as y,by as x,bz as _,bA as N,bB as D,bC as S,bD as P,bE as L,bF as v,bG as C}from"./chunks/framework.BCStJt3n.js";const E=JSON.parse('{"title":"Debugging, Doubly-Linked Lists, Project 1","description":"","frontmatter":{},"headers":[],"relativePath":"lectures/09-debugging-and-doubly-linked-lists.md","filePath":"lectures/09-debugging-and-doubly-linked-lists.md","lastUpdated":1755268310000}'),U={name:"lectures/09-debugging-and-doubly-linked-lists.md"};function B(G,i,T,j,H,I){return o(),t("div",null,i[0]||(i[0]=[e("h1",{id:"debugging-doubly-linked-lists-project-1",tabindex:"-1"},[n("Debugging, Doubly-Linked Lists, Project 1 "),e("a",{class:"header-anchor",href:"#debugging-doubly-linked-lists-project-1","aria-label":"Permalink to “Debugging, Doubly-Linked Lists, Project 1”"},"​")],-1),e("p",null,"Chapter 16",-1),e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/gJH2Wlqvw6k?rel=0&showinfo=0",title:"CSCI 315",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:"allowfullscreen"})])],-1),l('<h2 id="debugging-with-gdb" tabindex="-1">Debugging with GDB <a class="header-anchor" href="#debugging-with-gdb" aria-label="Permalink to “Debugging with GDB”">​</a></h2><h3 id="what-is-gdb" tabindex="-1">What is GDB? <a class="header-anchor" href="#what-is-gdb" aria-label="Permalink to “What is GDB?”">​</a></h3><ul><li><p><em><strong>GDB</strong></em> stands for <em><strong>GNU Project Debugger</strong></em> and was first written in 1986.</p></li><li><p>A debugging tool for C++ (and other languages).</p></li></ul><figure><img src="'+r+`" alt="Logo for GDB"><figcaption>Logo for GDB</figcaption></figure><ul><li><p>Lets you step through the code one instruction at a time to see what is happening.</p></li><li><p>Loads executable files that were compiled with debug information (<code>-g</code>).</p></li></ul><h3 id="compiling-a-program-for-debugging" tabindex="-1">Compiling a Program for Debugging <a class="header-anchor" href="#compiling-a-program-for-debugging" aria-label="Permalink to “Compiling a Program for Debugging”">​</a></h3><p><code>g++ -g &lt;source&gt; -o &lt;executable&gt;</code></p><h3 id="launching-and-exiting-gdb" tabindex="-1">Launching and Exiting GDB <a class="header-anchor" href="#launching-and-exiting-gdb" aria-label="Permalink to “Launching and Exiting GDB”">​</a></h3><ul><li><code>gdb</code> Start GDB.</li><li><code>gdb &lt;program&gt;</code> Start GDB.</li><li><code>gdb --args</code> Start GDB and pass arguments to executable.</li><li><code>quit</code> Exit GDB.</li></ul><h3 id="run-a-program-to-be-debugged" tabindex="-1">Run a Program to be Debugged <a class="header-anchor" href="#run-a-program-to-be-debugged" aria-label="Permalink to “Run a Program to be Debugged”">​</a></h3><ul><li><code>run</code> Run the executable that was previously set.</li><li><code>file</code> Set the executable to run.</li></ul><h3 id="breakpoints" tabindex="-1">Breakpoints <a class="header-anchor" href="#breakpoints" aria-label="Permalink to “Breakpoints”">​</a></h3><ul><li><code>break &lt;where&gt;</code> Set a new breakpoint.</li><li><code>enable &lt;breakpoint#&gt;</code> Enable a disabled breakpoint</li><li><code>disable &lt;breakpoint#&gt;</code> Disable a breakpoint.</li><li><code>delete &lt;breakpoint#&gt;</code> Remove a breakpoint.</li><li><code>clear</code> Delete all breakpoints.</li></ul><h3 id="stepping-through-lines-of-code" tabindex="-1">Stepping through Lines of Code <a class="header-anchor" href="#stepping-through-lines-of-code" aria-label="Permalink to “Stepping through Lines of Code”">​</a></h3><ul><li><code>step</code> Go to next instruction (source line), diving into function calls.</li><li><code>next</code> Go to next instruction (source line) in this function.</li><li><code>continue</code> Continue execution until the next breakpoint.</li><li><code>finish</code> Continue until the current function returns.</li></ul><h3 id="variables-and-memory" tabindex="-1">Variables and Memory <a class="header-anchor" href="#variables-and-memory" aria-label="Permalink to “Variables and Memory”">​</a></h3><ul><li><code>print</code> Print content of variable/memory location.</li><li><code>display</code> Like <code>print</code> but shows the information with each step.</li><li><code>undisplay</code> Remove the <code>display</code> with the given number.</li><li><code>info locals</code> Print the local variables or arguments in the current stack frame.</li></ul><h2 id="gdb-in-vs-code" tabindex="-1">GDB in VS Code <a class="header-anchor" href="#gdb-in-vs-code" aria-label="Permalink to “GDB in VS Code”">​</a></h2><h3 id="prerequisites-to-gdb-in-vs-code" tabindex="-1">Prerequisites to GDB in VS Code <a class="header-anchor" href="#prerequisites-to-gdb-in-vs-code" aria-label="Permalink to “Prerequisites to GDB in VS Code”">​</a></h3><ul><li><p>If running in WSL, install the WSL extension.</p></li><li><p>Install the C++ extension.</p></li><li><p>Open the lab/project folder (not just a source file or the whole repository).</p></li><li><p>Open a C++ file.</p></li></ul><h3 id="setup-project-for-gdb-in-vs-code" tabindex="-1">Setup Project for GDB in VS Code <a class="header-anchor" href="#setup-project-for-gdb-in-vs-code" aria-label="Permalink to “Setup Project for GDB in VS Code”">​</a></h3><ol><li><p>Open a C++ File in the Folder.</p></li><li><p>Click on the “Run” menu at the top.</p></li><li><p>Click on the “Add Configuration” menu item and select “G++ (GDB/LLDB)”.</p></li><li><p>Click “Add Configuration” on the bottom right.</p></li><li><p>Select “C/C++: (gdb) Launch”.</p></li><li><p>Modify the “name”, “program”, “args”, and “cwd” fields as desired.</p></li></ol><p><a href="https://code.visualstudio.com/docs/cpp/launch-json-reference" target="_blank" rel="noreferrer">https://code.visualstudio.com/docs/cpp/launch-json-reference</a></p><h3 id="use-gitignore-files" tabindex="-1">Use <code>.gitignore</code> files <a class="header-anchor" href="#use-gitignore-files" aria-label="Permalink to “Use .gitignore files”">​</a></h3><p>There are often files you do not want to share (executable, debug configuration).</p><p>Git will not track files and folders specified in a <code>.gitignore</code> file.</p><div class="language-plain line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>.vscode/*</span></span>
<span class="line"><span>obj/*</span></span>
<span class="line"><span>main</span></span>
<span class="line"><span>test-runner</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="doubly-linked-list" tabindex="-1">Doubly-Linked List <a class="header-anchor" href="#doubly-linked-list" aria-label="Permalink to “Doubly-Linked List”">​</a></h2><h3 id="what-if-we-want-to-traverse-the-list-in-reverse" tabindex="-1">What if we want to traverse the list in reverse? <a class="header-anchor" href="#what-if-we-want-to-traverse-the-list-in-reverse" aria-label="Permalink to “What if we want to traverse the list in reverse?”">​</a></h3><p>Three Options:</p><ol><li><p>We can use recursion to iterate to the end and then perform the operation when we “unwind.”</p></li><li><p>We can use a helper data structure (a stack).</p></li><li><p>We can implement a <em><strong>doubly-linked list</strong></em> type, where every node has a next and previous pointer.</p><figure class="light-only"><img src="`+d+'" alt="Example of a doubly-linked list" width="520px" class="light-only"><figcaption>Example of a doubly-linked list.</figcaption></figure><figure class="dark-only"><img src="'+s+'" alt="Example of a doubly-linked list" width="520px" class="dark-only"><figcaption>Example of a doubly-linked list.</figcaption></figure></li></ol><h3 id="prepending-a-doubly-linked-list" tabindex="-1">Prepending a Doubly-Linked List <a class="header-anchor" href="#prepending-a-doubly-linked-list" aria-label="Permalink to “Prepending a Doubly-Linked List”">​</a></h3><p>Step 0:</p><figure class="light-only"><img src="'+p+'" alt="Initial State" width="520px" class="light-only"><figcaption>Initial State before prepending to a doubly-linked list.</figcaption></figure><figure class="dark-only"><img src="'+c+'" alt="Initial State" width="520px" class="dark-only"><figcaption>Initial State before prepending to a doubly-linked list.</figcaption></figure><p>Step 1:</p><figure class="light-only"><img src="'+g+'" alt="Create the new node" width="520px" class="light-only"><figcaption>Create the new node.</figcaption></figure><figure class="dark-only"><img src="'+h+'" alt="Create the new node" width="520px" class="dark-only"><figcaption>Create the new node.</figcaption></figure><p>Step 2:</p><figure class="light-only"><img src="'+u+'" alt="Update pNewNode-&gt;pNext to mpHead" width="520px" class="light-only"><figcaption>Update <code>pNewNode-&gt;pNext</code> to <code>mpHead</code>.</figcaption></figure><figure class="dark-only"><img src="'+b+'" alt="Update pNewNode-&gt;pNext to mpHead" width="520px" class="dark-only"><figcaption>Update <code>pNewNode-&gt;pNext</code> to <code>mpHead</code>.</figcaption></figure><p>Step 3:</p><figure class="light-only"><img src="'+f+'" alt="Update mpHead-&gt;pPrev to pNewNode." width="520px" class="light-only"><figcaption>Update <code>mpHead-&gt;pPrev</code> to <code>pNewNode</code>.</figcaption></figure><figure class="dark-only"><img src="'+m+'" alt="Update mpHead-&gt;pPrev to pNewNode." width="520px" class="dark-only"><figcaption>Update <code>mpHead-&gt;pPrev</code> to <code>pNewNode</code>.</figcaption></figure><p>Step 4:</p><figure class="light-only"><img src="'+k+'" alt="Update mpHead to pNewNode." width="520px" class="light-only"><figcaption>Update <code>mpHead</code> to <code>pNewNode</code>.</figcaption></figure><figure class="dark-only"><img src="'+w+'" alt="Update mpHead to pNewNode." width="520px" class="dark-only"><figcaption>Update <code>mpHead</code> to <code>pNewNode</code>.</figcaption></figure><h3 id="appending-a-doubly-linked-list" tabindex="-1">Appending a Doubly-Linked List <a class="header-anchor" href="#appending-a-doubly-linked-list" aria-label="Permalink to “Appending a Doubly-Linked List”">​</a></h3><p>Step 0:</p><figure class="light-only"><img src="'+y+'" alt="Initial State" width="520px" class="light-only"><figcaption>Initial State before appending to a doubly-linked list.</figcaption></figure><figure class="dark-only"><img src="'+x+'" alt="Initial State" width="520px" class="dark-only"><figcaption>Initial State before appending to a doubly-linked list.</figcaption></figure><p>Step 1:</p><figure class="light-only"><img src="'+_+'" alt="Create the new node" width="520px" class="light-only"><figcaption>Create the new node.</figcaption></figure><figure class="dark-only"><img src="'+N+'" alt="Create the new node" width="520px" class="dark-only"><figcaption>Create the new node.</figcaption></figure><p>Step 2:</p><figure class="light-only"><img src="'+D+'" alt="Update pNewNode-&gt;pNext to mpHead" width="520px" class="light-only"><figcaption>Update <code>pNewNode-&gt;pNext</code> to <code>mpTail</code>.</figcaption></figure><figure class="dark-only"><img src="'+S+'" alt="Update pNewNode-&gt;pNext to mpHead" width="520px" class="dark-only"><figcaption>Update <code>pNewNode-&gt;pNext</code> to <code>mpTail</code>.</figcaption></figure><p>Step 3:</p><figure class="light-only"><img src="'+P+'" alt="Update mpTail-&gt;pNext to pNewNode." width="520px" class="light-only"><figcaption>Update <code>mpTail-&gt;pNext</code> to <code>pNewNode</code>.</figcaption></figure><figure class="dark-only"><img src="'+L+'" alt="Update mpTail-&gt;pNext to pNewNode." width="520px" class="dark-only"><figcaption>Update <code>mpTail-&gt;pNext</code> to <code>pNewNode</code>.</figcaption></figure><p>Step 4:</p><figure class="light-only"><img src="'+v+'" alt="Update mpTail to pNewNode." width="520px" class="light-only"><figcaption>Update <code>mpTail</code> to <code>pNewNode</code>.</figcaption></figure><figure class="dark-only"><img src="'+C+'" alt="Update mpTail to pNewNode." width="520px" class="dark-only"><figcaption>Update <code>mpTail</code> to <code>pNewNode</code>.</figcaption></figure><h2 id="intro-to-the-standard-template-library-slt" tabindex="-1">Intro. to the Standard Template Library (SLT) <a class="header-anchor" href="#intro-to-the-standard-template-library-slt" aria-label="Permalink to “Intro. to the Standard Template Library (SLT)”">​</a></h2><p><a href="./17-standard-template-library">Go here for lecture notes on the STL.</a></p><h2 id="homework" tabindex="-1">Homework <a class="header-anchor" href="#homework" aria-label="Permalink to “Homework”">​</a></h2><ul><li><p>Lab 9: <em>Doubly-Linked Lists</em></p></li><li><p>Project 1: <em>Large Map</em></p></li></ul>',67)]))}const A=a(U,[["render",B]]);export{E as __pageData,A as default};
