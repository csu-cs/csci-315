import{_ as a,c as t,o as e,j as s,af as n,a as l}from"./chunks/framework.HDGmwDL2.js";const y=JSON.parse('{"title":"More with Pointers and Unit Testing","description":"","frontmatter":{},"headers":[],"relativePath":"lectures/04-pointers-testing.md","filePath":"lectures/04-pointers-testing.md","lastUpdated":1755268310000}'),r={name:"lectures/04-pointers-testing.md"};function h(p,i,o,d,k,c){return e(),t("div",null,i[0]||(i[0]=[s("h1",{id:"more-with-pointers-and-unit-testing",tabindex:"-1"},[l("More with Pointers and Unit Testing "),s("a",{class:"header-anchor",href:"#more-with-pointers-and-unit-testing","aria-label":"Permalink to “More with Pointers and Unit Testing”"},"​")],-1),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/L7h6WVxJlWo?rel=0&showinfo=0",title:"CSCI 315",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:"allowfullscreen"})])],-1),n(`<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to “Overview”">​</a></h2><ul><li><p>Objects in C++ share many similarities with Java,<br> but are considered more powerful:</p><ul><li><p>They can be created on the stack.</p></li><li><p>C++ allows multiple inheritance.</p><ul><li>no need for the interface keyword.</li></ul></li><li><p>Templates act like generics, except they are a compile-time construct, not run time.</p></li></ul></li><li><p>Remember, C++ is compiled to machine code; Java compiles to byte code!</p></li></ul><h2 id="review" tabindex="-1">Review <a class="header-anchor" href="#review" aria-label="Permalink to “Review”">​</a></h2><h3 id="pointers-to-stack-memory" tabindex="-1">Pointers to Stack Memory <a class="header-anchor" href="#pointers-to-stack-memory" aria-label="Permalink to “Pointers to Stack Memory”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;"><code>int num = 32;</code></td><td style="text-align:left;">Declare an <code>int</code> variable on the stack and set to <code>32</code>.</td></tr><tr><td style="text-align:left;"><code>int *ptr;</code></td><td style="text-align:left;">Declare a variable <code>ptr</code> to store the memory address of where an <code>int</code> resides.</td></tr><tr><td style="text-align:left;"><code>ptr = \\&amp;num;</code></td><td style="text-align:left;"><code>\\&amp;num</code> gets the memory address of <code>num</code>. Stores the memory address of <code>num</code> in <code>ptr</code>.</td></tr><tr><td style="text-align:left;"><code>*ptr = 64;</code></td><td style="text-align:left;">Go to where <code>ptr</code> is pointing (<code>*</code>) and store <code>64</code> there. Since <code>ptr</code> is pointing to <code>num</code>, <code>num</code> now has <code>64</code>.</td></tr></tbody></table><h3 id="pointer-to-heap-memory" tabindex="-1">Pointer to Heap Memory <a class="header-anchor" href="#pointer-to-heap-memory" aria-label="Permalink to “Pointer to Heap Memory”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;"><code>int *a;</code></td><td style="text-align:left;">Create a variable <code>a</code> on the stack that will store the memory address of an integer.</td></tr><tr><td style="text-align:left;"><code>a = new int;</code></td><td style="text-align:left;">Allocate an <code>int</code> in memory and store the memory address of that <code>int</code> in <code>a</code>.</td></tr><tr><td style="text-align:left;"><code>*a = 5;</code></td><td style="text-align:left;">Manipulate the new <code>int</code> just like before.</td></tr><tr><td style="text-align:left;"><code>delete a;</code></td><td style="text-align:left;">Because the integer is on the heap, you must de-allocate!</td></tr><tr><td style="text-align:left;"><code>a = nullptr;</code></td><td style="text-align:left;">After <code>delete</code>, reassign the pointer to <code>nullptr</code> (best practice).</td></tr></tbody></table><h3 id="arrays-with-pointer-arithmetic" tabindex="-1">Arrays with Pointer Arithmetic <a class="header-anchor" href="#arrays-with-pointer-arithmetic" aria-label="Permalink to “Arrays with Pointer Arithmetic”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;"><code>int ary[100];</code></td><td style="text-align:left;">Create an array of 100 integerson the stack.</td></tr><tr><td style="text-align:left;"><code>int *pAry = ary;</code></td><td style="text-align:left;">Create a pointer to the array.Note: <code>\\&amp;</code> was not used.</td></tr></tbody></table><p>The following four statements are equivalent.</p><table tabindex="0"><thead><tr><th style="text-align:right;"></th><th style="text-align:left;"></th><th style="text-align:right;"></th></tr></thead><tbody><tr><td style="text-align:right;"><code>ary[10] = 50;</code></td><td style="text-align:left;"></td><td style="text-align:right;"><code>*(ary + 10) = 50;</code></td></tr><tr><td style="text-align:right;"></td><td style="text-align:left;"></td><td style="text-align:right;"></td></tr><tr><td style="text-align:right;"><code>pAry[10] = 50;</code></td><td style="text-align:left;"></td><td style="text-align:right;"><code>*(pAry + 10) = 50;</code></td></tr></tbody></table><h3 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to “Arrays”">​</a></h3><ul><li><p>In Java, arrays are actually objects that store length and other information.</p></li><li><p>In C++, an array is a sequence list of data. (Nothing else is stored.)</p></li><li><p>These are valid declarations in C++, but not in Java. Why?</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Create 20 integers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Button b[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Create 20 Buttons</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="pointers-and-arrays" tabindex="-1">Pointers and Arrays <a class="header-anchor" href="#pointers-and-arrays" aria-label="Permalink to “Pointers and Arrays”">​</a></h3><ul><li><p>In C++, pointers and arrays have a close relationship.</p></li><li><p>Instead of <code>int x[20];</code><br> we can can write<br><code>int *x = new int[20];</code><br> to allow for dynamic allocation.</p><ul><li><p>Usage of the array (e.g., <code>x[3] = 5;</code>) identical in both cases</p></li><li><p>To deallocate, use <code>delete[] x;</code></p></li></ul></li></ul><h2 id="constants" tabindex="-1">Constants <a class="header-anchor" href="#constants" aria-label="Permalink to “Constants”">​</a></h2><h3 id="pointers-and-const-correctness" tabindex="-1">Pointers and Const-Correctness <a class="header-anchor" href="#pointers-and-const-correctness" aria-label="Permalink to “Pointers and Const-Correctness”">​</a></h3><p>A good rule of thumb is to use <code>const</code> wherever possible. Pointers have two types of const-ness.</p><ul><li><p>A pointer to constant data<br><code>const int * ptr;</code><br><code>int const * ptr;</code><br> You cannot change the value at the address this pointer is pointing to.</p></li><li><p>A pointer with a const memory address<br><code>int * const ptr;</code><br> You cannot change what this pointer points to.</p></li></ul><h3 id="pointers-and-const-correctness-1" tabindex="-1">Pointers and Const-Correctness <a class="header-anchor" href="#pointers-and-const-correctness-1" aria-label="Permalink to “Pointers and Const-Correctness”">​</a></h3><p>A good rule of thumb is to use <code>const</code> wherever possible. Pointers have two types of const-ness.</p><ul><li>A const pointer to const data<br><code>const int * const ptr;</code><br><code>int const * const ptr;</code></li></ul><h2 id="object-pointers" tabindex="-1">Object Pointers <a class="header-anchor" href="#object-pointers" aria-label="Permalink to “Object Pointers”">​</a></h2><h3 id="in-c-a-pointer-can-point-to-anything" tabindex="-1">In C++, a pointer can point to anything. <a class="header-anchor" href="#in-c-a-pointer-can-point-to-anything" aria-label="Permalink to “In C++, a pointer can point to anything.”">​</a></h3><ul><li>Primitives</li><li>Arrays</li><li>Other pointers</li><li>Objects</li><li>Functions</li><li>Something nonspecific</li></ul><h3 id="casting" tabindex="-1">Casting <a class="header-anchor" href="#casting" aria-label="Permalink to “Casting”">​</a></h3><p>C++ is incredibly powerful, because of casting.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pInt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> reinterpret_cast&lt;float*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pInt);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14159</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // undefined behavior</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*pFloat = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pFloat;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    num = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><p>Yes, that is “legal.”</p></li><li><p>The value of <code>num</code> is !</p></li></ul><h3 id="pointers-to-objects" tabindex="-1">Pointers to Objects <a class="header-anchor" href="#pointers-to-objects" aria-label="Permalink to “Pointers to Objects”">​</a></h3><p>Pointers to instances of <code>struct</code>s and <code>class</code>es work the same as with primitive types (e.g., <code>int</code>).</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string name;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string breed;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yearsOld;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Dog myPet {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bella&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;German Shepherd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pFriend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dog {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Rocky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Poodle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPet.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pFriend).name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // using member-access arrow</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pFriend-&gt;name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="pointers-to-objects-1" tabindex="-1">Pointers to Objects <a class="header-anchor" href="#pointers-to-objects-1" aria-label="Permalink to “Pointers to Objects”">​</a></h3><ul><li><p>In Java, a pointer is called a reference to an object:<br><code>String str = new String(&quot;Hello!&quot;);</code></p></li><li><p>In C++, a pointer stores the memory location of something else. For objects:<br><code>std::string *str = new std::string(&quot;Hello!&quot;);</code></p></li></ul><h3 id="pointers-to-objects-a-simple-explanation" tabindex="-1">Pointers to Objects: A Simple Explanation <a class="header-anchor" href="#pointers-to-objects-a-simple-explanation" aria-label="Permalink to “Pointers to Objects: A Simple Explanation”">​</a></h3><ul><li><p>In Java, pointers only exist for objects.</p></li><li><p>In C++, a pointer may point to anything.</p></li></ul><h2 id="function-pointers" tabindex="-1">Function Pointers <a class="header-anchor" href="#function-pointers" aria-label="Permalink to “Function Pointers”">​</a></h2><h3 id="function-pointers-1" tabindex="-1">Function Pointers <a class="header-anchor" href="#function-pointers-1" aria-label="Permalink to “Function Pointers”">​</a></h3><ul><li><p>A <em><strong>pointer</strong></em> is a variable that stores the address of something.</p></li><li><p>A <em><strong>function pointer</strong></em> stores the address of a function.</p></li><li><p>The function can be called by dereferencing the function pointer.</p></li><li><p>Function pointers can be passed as parameters to other functions.</p></li><li><p>Functions can return function pointers.</p></li><li><p>Commonly used in <a href="https://en.wikipedia.org/wiki/Callback_(computer_programming)" target="_blank" rel="noreferrer">callbacks</a>.</p></li></ul><h3 id="function-pointers-2" tabindex="-1">Function Pointers <a class="header-anchor" href="#function-pointers-2" aria-label="Permalink to “Function Pointers”">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Display functions memory address.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Cast to void pointer to ensure the address is properly displayed.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> reinterpret_cast&lt;void*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(main) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> reinterpret_cast&lt;void*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Create a pointer that points to foo()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (*fcnPtr)() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Call foo() using pointer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The return value of foo() is &quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fcnPtr)()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="there-is-more" tabindex="-1">There is more <a class="header-anchor" href="#there-is-more" aria-label="Permalink to “There is more”">​</a></h3><p>Pointers can point to many things.</p><ul><li><p>Primitives</p></li><li><p>Arrays</p></li><li><p>Other pointers</p></li><li><p>Objects</p></li><li><p>Functions</p></li><li><p>Something nonspecific (<code>void *</code>).<br> Void pointers are more useful in C but should be avoided in C++.</p></li></ul><h2 id="lab-4-pointers" tabindex="-1">Lab 4: Pointers <a class="header-anchor" href="#lab-4-pointers" aria-label="Permalink to “Lab 4: Pointers”">​</a></h2><p>Let’s talk about Lab 4, which is more practice with pointers.</p><h2 id="ethics-essay-therac-25" tabindex="-1">Ethics Essay: THERAC-25 <a class="header-anchor" href="#ethics-essay-therac-25" aria-label="Permalink to “Ethics Essay: THERAC-25”">​</a></h2><p>Review the instructions for the ethics essay today!</p><h2 id="test-your-code" tabindex="-1">Test Your Code <a class="header-anchor" href="#test-your-code" aria-label="Permalink to “Test Your Code”">​</a></h2><p><em><strong>Testing will make you more productive.</strong></em><br> Meaning, you will spend less time working on problems because you will</p><ul><li><p>increase your chances of getting it right the first time AND</p></li><li><p>rarely make the same mistake twice.</p></li></ul><h3 id="warning" tabindex="-1">Warning <a class="header-anchor" href="#warning" aria-label="Permalink to “Warning”">​</a></h3><ul><li><p>A computer program <em>cannot</em> sufficiently generate test cases for your code.</p></li><li><p><a href="https://en.wikipedia.org/wiki/Halting_problem" target="_blank" rel="noreferrer">The Halting Problem</a>: Alan Turing proved that it is impossible for a computer to determine if any program halts (finishes).<br> (<a href="https://youtu.be/92WHN-pAFCs?t=14" target="_blank" rel="noreferrer">see Explanation on YouTube.</a>)</p></li><li><p>If we don’t know if it halts, how can we test?</p></li><li><p>This is your job, and an advantage you have over computation.</p></li></ul><h3 id="unit-test" tabindex="-1">Unit Test <a class="header-anchor" href="#unit-test" aria-label="Permalink to “Unit Test”">​</a></h3><ul><li><p>For this course, unit testing is sufficient.</p></li><li><p>There are many other forms of testing, but this course focuses on (relatively) small units of code.</p></li><li><p>There are numerous unit-testing tools, but no <em>de facto</em> standard for C++.</p><ul><li>Unlike Java’s JUnit</li></ul></li><li><p>Popular testing frameworks for C++ include <a href="https://google.github.io/googletest/" target="_blank" rel="noreferrer">GoogleTest</a>, <a href="https://www.boost.org/doc/libs/1_81_0/libs/test/doc/html/index.html" target="_blank" rel="noreferrer">Boost.Test</a>, <a href="https://freedesktop.org/wiki/Software/cppunit/" target="_blank" rel="noreferrer">CppUnit</a>, <a href="https://cxxtest.com/" target="_blank" rel="noreferrer">CxxTest</a>, and <a href="https://github.com/catchorg/Catch2" target="_blank" rel="noreferrer">Catch2</a>.</p></li></ul><h3 id="doctest-–-unit-testing-for-c" tabindex="-1">Doctest – Unit Testing for C++ <a class="header-anchor" href="#doctest-–-unit-testing-for-c" aria-label="Permalink to “Doctest – Unit Testing for C++”">​</a></h3><ul><li><p>We will use <a href="https://github.com/doctest/doctest#readme" target="_blank" rel="noreferrer">Doctest</a> for this course.</p><ul><li>Doctest is simple, yet has a rich feature set.</li></ul></li><li><p>You only need to place the one file, <a href="https://github.com/doctest/doctest/blob/master/doctest/doctest.h?raw=true" target="_blank" rel="noreferrer">doctest.h</a>, in your test repository.</p></li><li><p>I have provided a full template in class-code.<br> Let’s take a look</p></li></ul><h2 id="lab-5" tabindex="-1">Lab 5 <a class="header-anchor" href="#lab-5" aria-label="Permalink to “Lab 5”">​</a></h2><h3 id="auto-grader" tabindex="-1">Auto-Grader <a class="header-anchor" href="#auto-grader" aria-label="Permalink to “Auto-Grader”">​</a></h3><ul><li><p>An auto-grader will provide a grade for most of the labs (starting in Lab 5).</p><ul><li><p>It will not say what test cases you failed.</p></li><li><p>It may not mention if there is a timeout.</p></li><li><p>It may not say if there are compilation errors.</p></li><li><p>It <em>may</em> tell you which part of the lab you got right or wrong.</p></li></ul></li><li><p>Test cases from the auto-grader will <strong>NOT</strong> be disclose. You <strong>must</strong> learn how to write your own test cases!</p></li><li><p>The grade from the auto-grader should be pushed to your repository shortly after you push your solution.</p></li></ul><h3 id="lab-5-a-review-of-c-arrays" tabindex="-1">Lab 5: A Review of C++ Arrays <a class="header-anchor" href="#lab-5-a-review-of-c-arrays" aria-label="Permalink to “Lab 5: A Review of C++ Arrays”">​</a></h3><p>Let’s talk about Lab 5.</p>`,63)]))}const b=a(r,[["render",h]]);export{y as __pageData,b as default};
