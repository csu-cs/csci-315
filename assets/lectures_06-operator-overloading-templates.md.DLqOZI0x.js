import{_ as a,c as e,o as n,j as s,af as t,a as l}from"./chunks/framework.BCStJt3n.js";const u=JSON.parse('{"title":"Operator Overloading and Templates","description":"","frontmatter":{},"headers":[],"relativePath":"lectures/06-operator-overloading-templates.md","filePath":"lectures/06-operator-overloading-templates.md","lastUpdated":1755268310000}'),r={name:"lectures/06-operator-overloading-templates.md"};function p(h,i,o,d,k,c){return n(),e("div",null,i[0]||(i[0]=[s("h1",{id:"operator-overloading-and-templates",tabindex:"-1"},[l("Operator Overloading and Templates "),s("a",{class:"header-anchor",href:"#operator-overloading-and-templates","aria-label":"Permalink to “Operator Overloading and Templates”"},"​")],-1),s("p",null,"Chapter 13",-1),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/FXdo32nZi4M?rel=0&showinfo=0",title:"CSCI 315",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:"allowfullscreen"})])],-1),t(`<h2 id="objectives" tabindex="-1">Objectives <a class="header-anchor" href="#objectives" aria-label="Permalink to “Objectives”">​</a></h2><p>In this lecture, you will:</p><ul><li><p>Learn about overloading.</p></li><li><p>Become familiar with the restrictions on operator overloading.</p></li><li><p>Examine the <code>this</code> pointer.</p></li><li><p>Learn about <code>friend</code> functions.</p></li><li><p>Learn how to overload operators as members and nonmembers of a class.</p></li><li><p>Discover how to overload various operators.</p></li><li><p>Become familiar with the requirements for classes with pointer member variables.</p></li><li><p>Learn about templates.</p></li><li><p>Explore how to construct and use function and class templates.</p></li><li><p>Become aware of C++11 random number generators.</p></li></ul><h2 id="operator-overloading" tabindex="-1">Operator Overloading <a class="header-anchor" href="#operator-overloading" aria-label="Permalink to “Operator Overloading”">​</a></h2><h3 id="why-operator-overloading-is-needed" tabindex="-1">Why Operator Overloading Is Needed <a class="header-anchor" href="#why-operator-overloading-is-needed" aria-label="Permalink to “Why Operator Overloading Is Needed”">​</a></h3><p>Consider the following statements:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ClockType local{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ClockType yourTime{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Which version of the C++ statements below would you prefer?</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">incrementSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(yourTime))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (local </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yourTime)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="why-operator-overloading-is-needed-1" tabindex="-1">Why Operator Overloading Is Needed <a class="header-anchor" href="#why-operator-overloading-is-needed-1" aria-label="Permalink to “Why Operator Overloading Is Needed”">​</a></h3><ul><li><p>Assignment and member selection are the only built-in operations on classes.</p><ul><li>Other operators cannot be applied directly to class objects.</li></ul></li><li><p><em><strong>Operator overloading</strong></em> extends the definition of an operator to work with a user-defined data type.</p><ul><li>C++ allows you to extend the definitions of most of the operators to work with classes.</li></ul></li></ul><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to “Notes”">​</a></h3><ul><li><p>Most existing C++ operators can be overloaded to manipulate class objects.</p></li><li><p>New operators cannot be created.</p></li><li><p>An <em><strong>operator function</strong></em> is a function that overloads an operator.</p><ul><li>Use reserved word <code>operator</code> followed by the operator as the function name.</li></ul></li></ul><h3 id="syntax-for-operator-functions" tabindex="-1">Syntax for Operator Functions <a class="header-anchor" href="#syntax-for-operator-functions" aria-label="Permalink to “Syntax for Operator Functions”">​</a></h3><ul><li><p>Syntax of an operator function heading:<br><code>returnType operator symbol(formal parameter list)</code></p><ul><li><p>It is a value-returning function.</p></li><li><p><code>operator</code> is a reserved word.</p></li></ul></li><li><p>To overload an operator for a class:</p><ul><li><p>Include the operator function declaration in the class definition.</p></li><li><p>Write the definition of the operator function.</p></li></ul></li></ul><h3 id="friend-functions-of-classes" tabindex="-1">Friend Functions of Classes <a class="header-anchor" href="#friend-functions-of-classes" aria-label="Permalink to “Friend Functions of Classes”">​</a></h3><ul><li><p>A <em><strong>friend function</strong></em> (of a class) is a nonmember function of the class that has access to all the members of the class.</p></li><li><p>Use the reserved word <code>friend</code> in the function prototype in the class definition.</p></li><li><p>Friendship is always given by the class.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllusFriend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    friend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> two</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*parameters*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h3 id="definition-of-a-friend-function" tabindex="-1">Definition of a Friend Function <a class="header-anchor" href="#definition-of-a-friend-function" aria-label="Permalink to “Definition of a Friend Function”">​</a></h3><ul><li><p><code>friend</code> does not appear in the heading of the function’s definition.</p></li><li><p>When writing the <code>friend</code> function’s definition.</p></li><li><p>The name of the class and the scope resolution operator are not used.</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> two</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*parameters*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="operator-functions-as-member-and-nonmember-functions" tabindex="-1">Operator Functions as Member and Nonmember Functions <a class="header-anchor" href="#operator-functions-as-member-and-nonmember-functions" aria-label="Permalink to “Operator Functions as Member and Nonmember Functions”">​</a></h3><ul><li><p>To overload <code>()</code>, <code>[]</code>, <code>-&gt;</code>, or <code>=</code> for a class, the function must be a member of the class.</p></li><li><p>Suppose <code>op</code> is overloaded for <code>opOverClass</code>:</p><ul><li><p>If the leftmost operand of <code>op</code> is an object of a different type, the overloading function must be a nonmember (friend) of the class.</p></li><li><p>If the overloading function for <code>op</code> is a member of <code>opOverClass</code>, then when applying <code>op</code> on objects of type <code>opOverClass</code>, the leftmost operand must be of type <code>opOverClass</code>.</p></li></ul></li></ul><h2 id="binary-operators" tabindex="-1">Binary Operators <a class="header-anchor" href="#binary-operators" aria-label="Permalink to “Binary Operators”">​</a></h2><h3 id="overloading-binary-operators" tabindex="-1">Overloading Binary Operators <a class="header-anchor" href="#overloading-binary-operators" aria-label="Permalink to “Overloading Binary Operators”">​</a></h3><ul><li><p>If <strong><code>#</code></strong> represents a binary operator (e.g., <code>+</code> or <code>==</code>) that is to be overloaded for <code>rectangleType</code>.</p></li><li><p>It can be overloaded as either a member function of the class or as a friend function.</p></li></ul><h3 id="binary-operator-overloads-as-methods" tabindex="-1">Binary Operator Overloads as Methods <a class="header-anchor" href="#binary-operator-overloads-as-methods" aria-label="Permalink to “Binary Operator Overloads as Methods”">​</a></h3><ul><li><p>Function prototype (included in the class definition):<br><code>returnType operator#(const Type&amp;) const;</code></p></li><li><p>Function definition:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">returnType operator#(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> otherObject) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // algorithm to perform the operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h3 id="binary-operator-overloads-as-nonmember-functions" tabindex="-1">Binary Operator Overloads as Nonmember Functions <a class="header-anchor" href="#binary-operator-overloads-as-nonmember-functions" aria-label="Permalink to “Binary Operator Overloads as Nonmember Functions”">​</a></h3><ul><li><p>Function prototype (included in class definition):</p><pre><code>friend returnType operator#(const Type&amp;, const Type&amp;) const;
</code></pre></li><li><p>Function definition:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">returnType operator#(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> leftObject, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rightObject) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // algorithm to perform the operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h3 id="overloading-the-stream-insertion-and-extraction-operators" tabindex="-1">Overloading the Stream Insertion (<code>&lt;&lt;</code>) and Extraction (<code>&gt;&gt;</code>) Operators <a class="header-anchor" href="#overloading-the-stream-insertion-and-extraction-operators" aria-label="Permalink to “Overloading the Stream Insertion (&lt;&lt;) and Extraction (&gt;&gt;) Operators”">​</a></h3><ul><li><p>Consider the expression:<br><code>cout &lt;&lt; myRectangle;</code></p><ul><li>Leftmost operand is an <code>std::ostream</code> object, not a <code>rectangleType</code> object.</li></ul></li><li><p>Thus, the operator function that overloads <code>&lt;&lt;</code> for <code>rectangleType</code> must be a nonmember function of the class.</p><ul><li>The same applies to the function that overloads <code>&gt;&gt;</code>.</li></ul></li></ul><h3 id="overloading-the-stream-insertion-operator" tabindex="-1">Overloading the Stream Insertion Operator (<code>&lt;&lt;</code>) <a class="header-anchor" href="#overloading-the-stream-insertion-operator" aria-label="Permalink to “Overloading the Stream Insertion Operator (&lt;&lt;)”">​</a></h3><ul><li><p>Function prototype:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">friend</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Function definition:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> cObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // local declaration, if any</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Output the members of cObject.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // out &lt;&lt; ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // return the stream object.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="overloading-the-stream-extraction-operator" tabindex="-1">Overloading the Stream Extraction Operator (<code>&gt;&gt;</code>) <a class="header-anchor" href="#overloading-the-stream-extraction-operator" aria-label="Permalink to “Overloading the Stream Extraction Operator (&gt;&gt;)”">​</a></h3><ul><li><p>Function prototype:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">friend</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">istream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">istream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Function definition:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">istream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">istream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> cObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // local declaration, if any</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Read the members of cObject.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // in &gt;&gt; ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> in;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // return the stream object.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h3 id="overloading-the-assignment-operator" tabindex="-1">Overloading the Assignment Operator (<code>=</code>) <a class="header-anchor" href="#overloading-the-assignment-operator" aria-label="Permalink to “Overloading the Assignment Operator (=)”">​</a></h3><p>Function prototype:<br><code>const Type&amp; operator=(const Type&amp;);</code></p><p>Function definition:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> rightObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // local declaration, if any</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Avoid self-assignment</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rightObject)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Copy rightObject into this object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // return the object assigned</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="classes-with-pointer-members-revisited" tabindex="-1">Classes with Pointer Members (Revisited) <a class="header-anchor" href="#classes-with-pointer-members-revisited" aria-label="Permalink to “Classes with Pointer Members (Revisited)”">​</a></h3><ul><li><p>Recall that the assignment operator copies member variables from one object to another of the same type.</p><ul><li>Does not work well with pointer member variables.</li></ul></li><li><p>Classes with pointer member variables must:</p><ol><li><p>Explicitly overload the assignment operator.</p></li><li><p>Include the copy constructor.</p></li><li><p>Include the destructor.</p></li></ol></li></ul><h3 id="member-vs-nonmember-operator-overloading" tabindex="-1">Member vs. Nonmember Operator Overloading <a class="header-anchor" href="#member-vs-nonmember-operator-overloading" aria-label="Permalink to “Member vs. Nonmember Operator Overloading”">​</a></h3><ul><li><p>Some operators must be overloaded as member functions and some as nonmember (<code>friend</code>) functions.</p></li><li><p>Binary arithmetic operators can be overloaded either way.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><pre><code>or 
</code></pre><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">friend</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p>Member Function for Operator Overload:</p><ul><li><p>As a member function, the operation has direct access to data members of one of the objects.</p></li><li><p>Need to pass only one object as a parameter.</p></li></ul><p>Non-Member Function for Operator Overload:</p><ul><li><p>Both operands are included as parameters when nonmember functions that define binary operators.</p></li><li><p>The code may be somewhat clearer this way.</p></li></ul><h3 id="overloading-the-array-index-operator" tabindex="-1">Overloading the Array Index Operator <code>[]</code> <a class="header-anchor" href="#overloading-the-array-index-operator" aria-label="Permalink to “Overloading the Array Index Operator []”">​</a></h3><ul><li><p>Declaring the <code>[]</code> operator as a class member for nonconstant arrays:</p><pre><code>Type&amp; operator[](int index);
</code></pre></li><li><p>Declaring the <code>[]</code> operator as a class member for constant arrays:</p><pre><code>const Type&amp; operator[](int index) const;
</code></pre></li></ul><h2 id="overloading-unary-operators" tabindex="-1">Overloading Unary Operators <a class="header-anchor" href="#overloading-unary-operators" aria-label="Permalink to “Overloading Unary Operators”">​</a></h2><ul><li><p>To overload a unary operator for a class:</p><ul><li><p>If the operator function is a member of the class, it has no parameters.</p></li><li><p>If the operator function is a nonmember (i.e., a <code>friend</code> function), it has one parameter.</p></li></ul></li></ul><h3 id="pre-increment-and-pre-decrement" tabindex="-1">Pre-Increment (<code>++</code>) and Pre-Decrement (<code>-\`\`-</code>) <a class="header-anchor" href="#pre-increment-and-pre-decrement" aria-label="Permalink to “Pre-Increment (++) and Pre-Decrement (-\`\`-)”">​</a></h3><p>The general syntax to overload the pre-increment operator <code>++</code> as a member function.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Increment the value of the object by 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //return the new value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="post-increment-and-post-decrement" tabindex="-1">Post-Increment (<code>++</code>) and Post-Decrement (<code>-\`\`-</code>) <a class="header-anchor" href="#post-increment-and-post-decrement" aria-label="Permalink to “Post-Increment (++) and Post-Decrement (-\`\`-)”">​</a></h3><p>The general syntax to overload the post-increment operator <code>++</code> as a member function.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TEMP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // copy old value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Increment the value of the object by 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TEMP;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // the copy of the old value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Post-Increment (<code>++</code>) and Post-Decrement (<code>-\`\`-</code>) The general syntax to overload the post-increment operator <code>++</code> as a nonmember function.</p><ul><li><p>Function prototype:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">friend</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Function definition:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> incObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TEMP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> incObj;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // copy old</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Increment the value of the object by 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TEMP;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // the copy of the old value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h2 id="restrictions" tabindex="-1">Restrictions <a class="header-anchor" href="#restrictions" aria-label="Permalink to “Restrictions”">​</a></h2><h3 id="overloading-an-operator-some-restrictions" tabindex="-1">Overloading an Operator: Some Restrictions <a class="header-anchor" href="#overloading-an-operator-some-restrictions" aria-label="Permalink to “Overloading an Operator: Some Restrictions”">​</a></h3><ul><li><p>Cannot change the precedence of an operator.</p></li><li><p>Associativity cannot be changed.</p></li><li><p>Default parameters cannot be used.</p></li><li><p>Cannot change number of parameters.</p></li><li><p>Cannot create new operators.</p></li><li><p>Cannot overload: <code>.</code>  <code>.*</code>  <code>::</code>  <code>?:</code>  <code>sizeof</code></p></li><li><p>Operators on built-in types cannot be redefined.</p></li><li><p>Can overload for user-defined objects or for a combination of user-defined and built-in objects.</p></li></ul><h2 id="templates" tabindex="-1">Templates <a class="header-anchor" href="#templates" aria-label="Permalink to “Templates”">​</a></h2><h3 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to “Introduction”">​</a></h3><ul><li><p><em><strong>Templates</strong></em> enable you to write generic code for related functions and classes.</p></li><li><p><em><strong>Function templates</strong></em> simplify function overloading.</p></li></ul><h3 id="templates-1" tabindex="-1">Templates <a class="header-anchor" href="#templates-1" aria-label="Permalink to “Templates”">​</a></h3><ul><li><p>Templates give us similar functionality as <em>generics</em> in Java, but also so much more!</p></li><li><p>We can get the C++ compiler to write code for us, based on a set of rules we give it.</p></li><li><p><em><strong>Template</strong></em> – a single code body for a set of related functions (<em><strong>function template</strong></em>) and related classes (<em><strong>class template</strong></em>)</p></li><li><p>Syntax:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">declaration;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p><code>typename</code> denotes that we are creating a formal type parameter (<code>class</code> can also be used).</p></li><li><p><code>Type</code>, in this example, is the type “placeholder” (because it is listed after <code>typename</code>).</p></li><li><p><code>declaration</code> is either a function declaration or a class declaration.</p></li></ul></li><li><p><code>typename</code> in the heading refers to any user-defined type or built-in type.</p></li><li><p><code>Type</code> is a formal parameter to the template</p></li><li><p>Just as variables are parameters to functions, data types are parameters to templates</p></li></ul><h3 id="function-templates" tabindex="-1">Function Templates <a class="header-anchor" href="#function-templates" aria-label="Permalink to “Function Templates”">​</a></h3><ul><li><p>Syntax of the function template:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">function declaration;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>Type is a formal parameter of the template used to:</p><ul><li><p>Specify the parameter types of the function.</p></li><li><p>Specify the return type of the function.</p></li><li><p>Declare variables within the function.</p></li></ul></li></ul><h3 id="function-templates-1" tabindex="-1">Function Templates <a class="header-anchor" href="#function-templates-1" aria-label="Permalink to “Function Templates”">​</a></h3><ul><li><p>A function template is not an actual function!<br> Source: <a href="https://youtu.be/LMP_sxOaz6g" target="_blank" rel="noreferrer">Back to Basics: Function and Class Templates - Dan Saks - CppCon 2019</a></p></li><li><p>It is a generalization of an algorithm that can generate generate similar, but distinct, function definitions.</p></li><li><p>Each generates function implements the algorithm for operands of different types.</p></li></ul><h3 id="abbreviated-function-templates" tabindex="-1">Abbreviated Function Templates <a class="header-anchor" href="#abbreviated-function-templates" aria-label="Permalink to “Abbreviated Function Templates”">​</a></h3><p>As of C++20, the <code>auto</code> keyword can be used as a shorthand for parameter type in a function template declaration.</p><p>The following function declarations are identical.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>g++</code> may default to an older C++ standard. If so, add <code>-std=c++20</code> to your compiler arguments to user template abbreviation.</p><p>The auto-grader uses the C++20 when checking your code.</p><h3 id="class-templates" tabindex="-1">Class Templates <a class="header-anchor" href="#class-templates" aria-label="Permalink to “Class Templates”">​</a></h3><ul><li><p>Class template: a single code segment for a set of related classes</p></li><li><p>Called parameterized types</p></li><li><p>Syntax:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> declaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>A template instantiation can be created with either a built-in or user-defined type</p></li><li><p>The function members of a class template are considered to be function templates</p></li></ul><h3 id="source-files-for-templated-classes" tabindex="-1">Source Files for Templated Classes <a class="header-anchor" href="#source-files-for-templated-classes" aria-label="Permalink to “Source Files for Templated Classes”">​</a></h3><ul><li><p>Passing a parameter to a function occurs at <em><strong>run time</strong></em>.</p></li><li><p>Passing a parameter to a class template occurs at <em><strong>compile time</strong></em>.</p></li><li><p>Therefore, the implementation file cannot be compiled independently of the client code.</p><ul><li><p>Can put class- and function-template definitions directly in the client code.</p></li><li><p>Can put class- and function-template definitions in the same header file.</p></li></ul></li><li><p>Another alternative is to put class definition and function definitions in separate files.</p><ul><li>Include the directive to the implementation file at the end of the header file.</li></ul></li><li><p>In either case, function definitions and client code are compiled together.</p></li></ul><h3 id="array-based-lists" tabindex="-1">Array-Based Lists <a class="header-anchor" href="#array-based-lists" aria-label="Permalink to “Array-Based Lists”">​</a></h3><ul><li><p>Using class templates allows the creation of generic code.</p></li><li><p>Can create abstract class <code>ArrayList</code> as an abstract data type (ADT).</p><ul><li>Must overload the assignment operator.</li></ul></li><li><p>Can derive <code>UnorderedArrayList</code> or <code>OrderedArrayList</code> from <code>ArrayList</code>.</p></li></ul><h2 id="c-11-random-number-generator" tabindex="-1">C++11 Random-Number Generator <a class="header-anchor" href="#c-11-random-number-generator" aria-label="Permalink to “C++11 Random-Number Generator”">​</a></h2><ul><li><p>To use C++ 11 random-number generator functions, we use an engine and a distributor.</p><ul><li><p>An engine returns unpredictable (random) bits.</p></li><li><p>A distribution returns random numbers whose likelihoods correspond to a specific shape such as a uniform or normal distribution.</p></li></ul></li><li><p>The C++11 standard library provides 25 distribution types in five categories.</p><ul><li><code>uniform_int_distribution</code> and <code>uniform_real_distribution</code> fall in the category of uniform distributions.</li></ul></li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;random&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::random_device randDevice;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::default_random_engine num{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::uniform_int_distribution</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dist{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Generate 10 ints that are between 1 and 6.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="quick-review" tabindex="-1">Quick Review <a class="header-anchor" href="#quick-review" aria-label="Permalink to “Quick Review”">​</a></h2><ul><li><p><em><strong>Overloaded</strong></em> operator – an operator that has different meanings with different data types.</p></li><li><p>Operator function – a function that overloads an operator.</p></li><li><p>Operator functions are value-returning.</p></li><li><p>Operator overloading provides the same concise notation for user-defined data types as for built-in data types.</p></li><li><p>Only existing operators can be overloaded.</p></li><li><p>The <code>this</code> pointer refers to the object.</p></li><li><p>A <code>friend</code> function is a nonmember of a class.</p></li><li><p>If an operator function is a member of a class, the leftmost operand of the operator must be a class object (or a reference to a class object) of that operator’s class.</p></li><li><p>Classes with pointer variables <em><strong>must</strong></em> overload the assignment operator, and include both the copy constructor and the destructor.</p></li><li><p>In C++, <code>template</code> is a reserved word.</p></li><li><p>Function template: a single code segment for a set of related functions.</p></li><li><p>Class template: a single code segment for a set of related classes.</p></li><li><p>Are called <em><strong>parameterized types</strong></em>.</p></li><li><p>C++11 provides many functions to implement random number generators.</p></li></ul><h2 id="lab-6-templates-and-operator-overloading" tabindex="-1">Lab 6: Templates and Operator Overloading <a class="header-anchor" href="#lab-6-templates-and-operator-overloading" aria-label="Permalink to “Lab 6: Templates and Operator Overloading”">​</a></h2><p>Let’s take a look at Lab 6.</p>`,90)]))}const b=a(r,[["render",p]]);export{u as __pageData,b as default};
