import{_ as d,I as k,c as e,o as t,j as s,af as p,a,J as l,w as r,aM as g,aN as c,aO as m,aP as y,aQ as u,aR as b,aS as E,aT as f,aU as h,aV as o,aW as x,aX as Q,aY as A,aZ as T,a_ as w,a$ as F,b0 as v,b1 as C,b2 as D,b3 as B}from"./chunks/framework.HDGmwDL2.js";const ys=JSON.parse('{"title":"Memory Management","description":"","frontmatter":{},"headers":[],"relativePath":"lectures/03-memory-management.md","filePath":"lectures/03-memory-management.md","lastUpdated":1755268310000}'),M={name:"lectures/03-memory-management.md"},P={tabindex:"0"},_={style:{"text-align":"left"}},S={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},H={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.181ex",role:"img",focusable:"false",viewBox:"0 -511 1000 522","aria-hidden":"true"},L={style:{"text-align":"left"}},j={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},I={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.181ex",role:"img",focusable:"false",viewBox:"0 -511 1000 522","aria-hidden":"true"},V={style:{"text-align":"left"}},J={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Z={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.181ex",role:"img",focusable:"false",viewBox:"0 -511 1000 522","aria-hidden":"true"},G={style:{"text-align":"left"}},q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},N={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.181ex",role:"img",focusable:"false",viewBox:"0 -511 1000 522","aria-hidden":"true"},z={style:{"text-align":"right"}},R={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},O={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.439ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.199ex",height:"1.439ex",role:"img",focusable:"false",viewBox:"0 -442 972 636","aria-hidden":"true"},U={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},$={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.181ex",role:"img",focusable:"false",viewBox:"0 -511 1000 522","aria-hidden":"true"},W={style:{"text-align":"left"}},Y={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},X={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.181ex",role:"img",focusable:"false",viewBox:"0 -511 1000 522","aria-hidden":"true"},K={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ss={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.312ex"},xmlns:"http://www.w3.org/2000/svg",width:"14.04ex",height:"1.882ex",role:"img",focusable:"false",viewBox:"0 -694 6205.7 832","aria-hidden":"true"},is={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},as={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},es={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ts={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.109ex",height:"1.464ex",role:"img",focusable:"false",viewBox:"0 -442 490 647","aria-hidden":"true"},ns={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ls={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.052ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 465 453","aria-hidden":"true"},rs={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ps={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.028ex",height:"1.581ex",role:"img",focusable:"false",viewBox:"0 -677 2222.4 699","aria-hidden":"true"};function hs(os,i,ds,ks,gs,cs){const n=k("mjx-assistive-mml");return t(),e("div",null,[i[58]||(i[58]=s("h1",{id:"memory-management",tabindex:"-1"},[a("Memory Management "),s("a",{class:"header-anchor",href:"#memory-management","aria-label":"Permalink to “Memory Management”"},"​")],-1)),i[59]||(i[59]=s("p",null,"Chapter 12",-1)),i[60]||(i[60]=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/K9WPtkX4GPs?rel=0&showinfo=0",title:"CSCI 315",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:"allowfullscreen"})])],-1)),i[61]||(i[61]=p(`<h2 id="references-aliases" tabindex="-1">References &amp; Aliases <a class="header-anchor" href="#references-aliases" aria-label="Permalink to “References &amp; Aliases”">​</a></h2><h3 id="a-review-of-c-references-aliases" tabindex="-1">A Review of C++ References &amp; Aliases <a class="header-anchor" href="#a-review-of-c-references-aliases" aria-label="Permalink to “A Review of C++ References &amp; Aliases”">​</a></h3><ol><li><p>In a parameter declaration, <code>&amp;</code> makes a <em>reference</em>.<br> The parameter refers to the memory location of the original variable.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 120.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(score, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 100.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>In a variable declaration, <code>&amp;</code> makes that variable an <em>alias</em>.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 205.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alias </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The variable is a new name for the old variable location.</p></li><li><p>Before an existing variable, <code>&amp;</code> evaluates to the variable’s memory address.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 91.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">score;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // score&#39;s address.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h2 id="static-data" tabindex="-1">Static Data <a class="header-anchor" href="#static-data" aria-label="Permalink to “Static Data”">​</a></h2><h3 id="the-3-memory-sections-for-data-storage" tabindex="-1">The 3 Memory Sections (for Data Storage) <a class="header-anchor" href="#the-3-memory-sections-for-data-storage" aria-label="Permalink to “The 3 Memory Sections (for Data Storage)”">​</a></h3><ul><li><p><strong>Static</strong>: storage requirements are known and allocated before execution and remain for the entire program execution.</p></li><li><p><strong>Call Stack</strong> (or execution stack): memory associated with active functions.</p><ul><li>Structured as <em><strong>stack frames</strong></em> (i.e., activation records)</li></ul></li><li><p><strong>Heap</strong>: dynamically allocated storage; the least organized and most dynamic storage area.</p></li></ul><figure class="light-only"><img src="`+g+'" alt="" width="200px" class="light-only"><figcaption>Memory layout for each running process.</figcaption></figure><figure class="dark-only"><img src="'+c+`" alt="" width="200px" class="dark-only"><figcaption>Memory layout for each running process.</figcaption></figure><h3 id="static-data-memory" tabindex="-1">Static Data Memory <a class="header-anchor" href="#static-data-memory" aria-label="Permalink to “Static Data Memory”">​</a></h3><ul><li><p>The simplest memory to manage.</p></li><li><p>Consists of anything that can be completely determined at compile time. For example:</p><ul><li><p>global variables,</p></li><li><p>static variables, and</p></li><li><p>function and class definitions (instructions).</p></li></ul></li><li><p>Characteristics:</p><ul><li><p>Storage requirements are known before execution.</p></li><li><p>The size of the static storage area is constant throughout execution.</p></li></ul></li></ul><h2 id="the-stack" tabindex="-1">The Stack <a class="header-anchor" href="#the-stack" aria-label="Permalink to “The Stack”">​</a></h2><h3 id="the-call-stack" tabindex="-1">The Call Stack <a class="header-anchor" href="#the-call-stack" aria-label="Permalink to “The Call Stack”">​</a></h3><ul><li><p>The <em><strong>Call Stack</strong></em> (i.e., the <em>Runtime Stack</em> or <em>Execution Stack</em>) is a contiguous memory region that grows and shrinks.</p></li><li><p>Supports function calls.</p></li><li><p>The stack <strong>grows</strong> when a function is called (activated); its <em><strong>stack frame</strong></em> (or <em><strong>activation record</strong></em>) is pushed on top.</p></li><li><p>It <strong>shrinks</strong> when the function terminates; storage is deallocated.</p></li></ul><h3 id="stack-frames" tabindex="-1">Stack Frames <a class="header-anchor" href="#stack-frames" aria-label="Permalink to “Stack Frames”">​</a></h3><ul><li><p>For each function call, a <em><strong>stack frame</strong></em> stores local variables, parameters, and return linkage.</p></li><li><p>The size and structure of a stack frame are <em><strong>known at compile time</strong></em>, but its contents and time of allocation are unknown until runtime.</p></li><li><p>How is variable lifetime affected by stack management techniques?</p></li></ul><p><a href="https://pythontutor.com/render.html#code=int%20add%28int%20a,%20int%20b%29%0A%7B%0A%20%20return%20a%20%2B%20b%3B%0A%7D%0A%0Aint%20doubleAdd%28int%20a,%20int%20b%29%0A%7B%0A%20%20return%20add%28a,%20b%29%0A%20%20%20%20%2B%20add%28b,%20a%29%3B%0A%7D%0A%0Aint%20main%28%29%0A%7B%0A%20%20int%20total%20%3D%200%3B%0A%20%20total%20%3D%20add%281,%202%29%3B%0A%20%20total%20%3D%20doubleAdd%283,%204%29%3B%0A%0A%20%20return%200%3B%0A%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=cpp_g%2B%2B9.3.0&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" rel="noreferrer">Click here to step through this example code.</a></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &lt;- 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doubleAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b, a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &lt;- 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doubleAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &lt;- 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,17)),s("table",P,[i[34]||(i[34]=s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"right"}}),s("th",{style:{"text-align":"left"}})])],-1)),s("tbody",null,[i[29]||(i[29]=s("tr",null,[s("td",{style:{"text-align":"right"}}),s("td",{style:{"text-align":"left"}})],-1)),i[30]||(i[30]=s("tr",null,[s("td",{style:{"text-align":"right"}}),s("td",{style:{"text-align":"left"}},[s("code",null,"main()")])],-1)),s("tr",null,[i[4]||(i[4]=s("td",{style:{"text-align":"right"}},null,-1)),s("td",_,[i[2]||(i[2]=a("total ",-1)),s("mjx-container",S,[(t(),e("svg",H,i[0]||(i[0]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2192",d:"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[1]||(i[1]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{stretchy:"false"},"→")],-1)])),_:1,__:[1]})]),i[3]||(i[3]=a(" 0",-1))])]),i[31]||(i[31]=s("tr",null,[s("td",{style:{"text-align":"right"}}),s("td",{style:{"text-align":"left"}},[s("code",null,"doubleAdd()")])],-1)),s("tr",null,[i[9]||(i[9]=s("td",{style:{"text-align":"right"}},null,-1)),s("td",L,[i[7]||(i[7]=a("int a ",-1)),s("mjx-container",j,[(t(),e("svg",I,i[5]||(i[5]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2192",d:"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[6]||(i[6]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{stretchy:"false"},"→")],-1)])),_:1,__:[6]})]),i[8]||(i[8]=a(" 3",-1))])]),s("tr",null,[i[14]||(i[14]=s("td",{style:{"text-align":"right"}},null,-1)),s("td",V,[i[12]||(i[12]=a("int b ",-1)),s("mjx-container",J,[(t(),e("svg",Z,i[10]||(i[10]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2192",d:"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[11]||(i[11]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{stretchy:"false"},"→")],-1)])),_:1,__:[11]})]),i[13]||(i[13]=a(" 4",-1))])]),i[32]||(i[32]=s("tr",null,[s("td",{style:{"text-align":"right"}}),s("td",{style:{"text-align":"left"}},[s("code",null,"add()")])],-1)),s("tr",null,[i[19]||(i[19]=s("td",{style:{"text-align":"right"}},null,-1)),s("td",G,[i[17]||(i[17]=a("int a ",-1)),s("mjx-container",q,[(t(),e("svg",N,i[15]||(i[15]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2192",d:"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[16]||(i[16]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{stretchy:"false"},"→")],-1)])),_:1,__:[16]})]),i[18]||(i[18]=a(" 4",-1))])]),s("tr",null,[s("td",z,[s("mjx-container",R,[(t(),e("svg",O,i[20]||(i[20]=[p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g></g></g>',1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[21]||(i[21]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"s"),s("mi",null,"p")],-1)])),_:1,__:[21]})]),i[24]||(i[24]=a()),s("mjx-container",U,[(t(),e("svg",$,i[22]||(i[22]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2192",d:"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[23]||(i[23]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{stretchy:"false"},"→")],-1)])),_:1,__:[23]})])]),s("td",W,[i[27]||(i[27]=a("int b ",-1)),s("mjx-container",Y,[(t(),e("svg",X,i[25]||(i[25]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2192",d:"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[26]||(i[26]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{stretchy:"false"},"→")],-1)])),_:1,__:[26]})]),i[28]||(i[28]=a(" 3",-1))])]),i[33]||(i[33]=s("tr",null,[s("td",{style:{"text-align":"right"}},"2-2"),s("td",{style:{"text-align":"left"}})],-1))])]),i[62]||(i[62]=s("h3",{id:"stack-overflow",tabindex:"-1"},[a("Stack Overflow "),s("a",{class:"header-anchor",href:"#stack-overflow","aria-label":"Permalink to “Stack Overflow”"},"​")],-1)),s("ul",null,[i[39]||(i[39]=s("li",null,[s("p",null,"The call stack and heap grow towards each other as required by program events.")],-1)),s("li",null,[s("p",null,[i[37]||(i[37]=a("The following relation must hold:",-1)),i[38]||(i[38]=s("br",null,null,-1)),s("mjx-container",K,[(t(),e("svg",ss,i[35]||(i[35]=[p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2687.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3743.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(4549.9,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5605.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g>',1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[36]||(i[36]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"0"),s("mo",null,"≤"),s("mi",null,"h"),s("mo",null,"≤"),s("mi",null,"a"),s("mo",null,"≤"),s("mi",null,"n")],-1)])),_:1,__:[36]})])])]),i[40]||(i[40]=s("li",null,[s("p",null,"In other words, if the stack top bumps into the heap, or if the beginning of the heap is greater than the end, there are problems!")],-1))]),i[63]||(i[63]=p(`<h2 id="the-heap" tabindex="-1">The Heap <a class="header-anchor" href="#the-heap" aria-label="Permalink to “The Heap”">​</a></h2><h3 id="heap-memory" tabindex="-1">Heap Memory <a class="header-anchor" href="#heap-memory" aria-label="Permalink to “Heap Memory”">​</a></h3><ul><li><p>Heap objects are <em>dynamically</em> allocated/deallocated at runtime (not associated with function call/return).</p></li><li><p>Dynamic variables are created at runtime instead of at compile-time.</p></li><li><p>The kind of data found on the heap is language dependant.</p><ul><li><p>Typically holds strings, dynamic arrays, objects, and linked structures</p></li><li><p>Java and C/C++ have different policies.</p></li></ul></li></ul><h3 id="heap-memory-example" tabindex="-1">Heap Memory Example <a class="header-anchor" href="#heap-memory-example" aria-label="Permalink to “Heap Memory Example”">​</a></h3><p><a href="https://pythontutor.com/render.html#code=%23include%20%3Ciostream%3E%0A%0Aint%20main%28%29%0A%7B%0A%20%20const%20int%20SIZE%20%3D%203%3B%0A%20%20int%20stackArray%5BSIZE%5D%3B%20//%20Declared%20on%20the%20stack%0A%20%20int*%20heapArray%3B%20//%20Pointer%20to%20memory%20location%0A%20%20heapArray%20%3D%20new%20int%5BSIZE%5D%3B%20//%20Declare%20array%20on%20heap%0A%0A%20%20std%3A%3Acout%20%3C%3C%20%22stackArray%20%20%3D%20%22%20%3C%3C%20stackArray%20%3C%3C%20std%3A%3Aendl%3B%0A%20%20std%3A%3Acout%20%3C%3C%20%22heapArray%20%20%20%3D%20%22%20%3C%3C%20heapArray%20%3C%3C%20std%3A%3Aendl%3B%0A%20%20%0A%20%20stackArray%5B2%5D%20%3D%2020%3B%0A%20%20heapArray%5B2%5D%20%3D%2020%3B%0A%20%20%0A%20%20//%20Free%20up%20the%20memory%20from%20the%20heap%20array%0A%20%20delete%5B%5D%20heapArray%3B%0A%20%20heapArray%20%3D%20nullptr%3B%0A%0A%20%20return%200%3B%0A%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=cpp_g%2B%2B9.3.0&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" rel="noreferrer">Click here to step through this example code.</a></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">##include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stackArray[SIZE];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Declared on the stack</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">heapArray;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Declare pointer to memory location</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heapArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[SIZE];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Declare array on heap</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stackArray  = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stackArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;heapArray   = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heapArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stackArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heapArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  delete[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heapArray;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Free up the memory from the heap array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heapArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Set pointer to point to address 0.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="heap-memory-1" tabindex="-1">Heap Memory <a class="header-anchor" href="#heap-memory-1" aria-label="Permalink to “Heap Memory”">​</a></h3><ul><li><p>The <code>new</code> operator allocates heap storage.</p></li><li><p>The <code>delete</code> or <code>delete[]</code> operators deallocate heap storage for reuse.</p></li><li><p>Space is allocated in variable-sized blocks, so deallocation may leave “holes” in the heap (fragmentation).</p><ul><li>Compared to the deallocation of stack storage</li></ul></li></ul><h3 id="heap-management" tabindex="-1">Heap Management <a class="header-anchor" href="#heap-management" aria-label="Permalink to “Heap Management”">​</a></h3><ul><li><p>Some languages (e.g., C, C++) leave heap storage deallocation to the programmer.</p></li><li><p>Others (e.g., Java, Perl, Python, list-processing languages) employ <em>garbage collection</em> to reclaim unused heap space.</p></li></ul><h3 id="heap-management-functions" tabindex="-1">Heap Management Functions <a class="header-anchor" href="#heap-management-functions" aria-label="Permalink to “Heap Management Functions”">​</a></h3>`,11)),s("ul",null,[i[57]||(i[57]=s("li",null,[s("p",null,[s("code",null,"new"),a(" returns the start address of an unused block from the heap and changes its state from "),s("em",null,"unused"),a(" to "),s("em",null,"reserved"),a(" (and undefined).")])],-1)),s("li",null,[s("p",null,[i[47]||(i[47]=a("Suppose a Point class has three 4-byte data members: ",-1)),s("mjx-container",is,[(t(),e("svg",as,i[41]||(i[41]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D465",d:"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[42]||(i[42]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"x")],-1)])),_:1,__:[42]})]),i[48]||(i[48]=a(", ",-1)),s("mjx-container",es,[(t(),e("svg",ts,i[43]||(i[43]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D466",d:"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[44]||(i[44]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"y")],-1)])),_:1,__:[44]})]),i[49]||(i[49]=a(", ",-1)),s("mjx-container",ns,[(t(),e("svg",ls,i[45]||(i[45]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D467",d:"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z",style:{"stroke-width":"3"}})])])],-1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[46]||(i[46]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"z")],-1)])),_:1,__:[46]})]),i[50]||(i[50]=a(".",-1))])]),s("li",null,[s("p",null,[i[53]||(i[53]=s("code",null,"Point firstCoord = new Point();",-1)),i[54]||(i[54]=s("br",null,null,-1)),i[55]||(i[55]=a(" requires at least allocated ",-1)),s("mjx-container",rs,[(t(),e("svg",ps,i[51]||(i[51]=[p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" style="stroke-width:3;"></path></g></g></g>',1)]))),l(n,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:r(()=>i[52]||(i[52]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"4")],-1)])),_:1,__:[52]})]),i[56]||(i[56]=a(" bytes.",-1))])])]),i[64]||(i[64]=p(`<h3 id="heap-overflow" tabindex="-1">Heap Overflow <a class="header-anchor" href="#heap-overflow" aria-label="Permalink to “Heap Overflow”">​</a></h3><ul><li><p>A <strong>heap overflow</strong> occurs when calling <code>new</code> and the heap does not have a big enough block of free contiguous space.</p></li><li><p>So, <code>new</code> either fails (in the case of heap overflow) or returns a pointer to the new block.</p></li></ul><h3 id="heap-management-functions-1" tabindex="-1">Heap Management Functions <a class="header-anchor" href="#heap-management-functions-1" aria-label="Permalink to “Heap Management Functions”">​</a></h3><ul><li><p><code>delete</code> returns a storage block to the heap.</p></li><li><p>The status of the block returns to <em>unused</em> and is available for allocation by future calls to <code>new</code>.</p></li><li><p>One cause of heap overflow is a failure on the part of the program to return unused storage.</p></li></ul><h2 id="pointers" tabindex="-1">Pointers <a class="header-anchor" href="#pointers" aria-label="Permalink to “Pointers”">​</a></h2><ul><li><p>Pointers are addresses (i.e., the value of a pointer variable is an address).</p></li><li><p>Memory that is accessed through a pointer is dynamically allocated in the heap.</p></li><li><p>Java doesn’t have explicit pointers; reference types are heap allocated (although the reference is on the stack).</p></li><li><p>This topic is covered well in the textbook’s Chapter 12.</p></li></ul><h3 id="memory-allocation-java-vs-c" tabindex="-1">Memory Allocation Java vs C++ <a class="header-anchor" href="#memory-allocation-java-vs-c" aria-label="Permalink to “Memory Allocation Java vs C++”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Java</th><th style="text-align:left;">Stack Example</th><th style="text-align:left;">Heap Example</th></tr></thead><tbody><tr><td style="text-align:left;">Primitives</td><td style="text-align:left;"><code>int a = 3;</code></td><td style="text-align:left;"><code>int[] a = new int[1];</code></td></tr><tr><td style="text-align:left;">Classes</td><td style="text-align:left;"><em>Does not exist.</em></td><td style="text-align:left;"><code>String str = new String(&quot;Hi!&quot;);</code></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>C++</strong></td><td style="text-align:left;">Stack Example</td><td style="text-align:left;">Heap Example</td></tr><tr><td style="text-align:left;">Primitives</td><td style="text-align:left;"><code>int a = 3;</code></td><td style="text-align:left;"><code>int *a = new int;</code></td></tr><tr><td style="text-align:left;">Classes</td><td style="text-align:left;"><code>string str(&quot;Hi!&quot;);</code></td><td style="text-align:left;"><code>string *str = new string(&quot;Hi!&quot;);</code></td></tr></tbody></table><h3 id="examples-in-code" tabindex="-1">Examples in Code <a class="header-anchor" href="#examples-in-code" aria-label="Permalink to “Examples in Code”">​</a></h3><p>In class, we will create and test out some more pointers.</p><h3 id="java-versus-c-c-arrays" tabindex="-1">Java Versus C/C++ Arrays <a class="header-anchor" href="#java-versus-c-c-arrays" aria-label="Permalink to “Java Versus C/C++ Arrays”">​</a></h3><ul><li><p>In Java, arrays are always allocated dynamically from heap memory.</p></li><li><p>In many other languages, including C++:</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;">Globally defined arrays</td><td style="text-align:left;">static memory.</td></tr><tr><td style="text-align:left;">Local (to a function) arrays</td><td style="text-align:left;">stack storage.</td></tr><tr><td style="text-align:left;">Dynamically allocated arrays</td><td style="text-align:left;">heap storage.</td></tr></tbody></table></li><li><p>Dynamically allocated arrays also have stack storage — a reference (pointer) to the heap block that holds the array.</p></li></ul><h3 id="comparing-pointers" tabindex="-1">Comparing Pointers <a class="header-anchor" href="#comparing-pointers" aria-label="Permalink to “Comparing Pointers”">​</a></h3><pre><code>int i = 5, j = 5;
int *ptrJ1 = &amp;j;
int *ptrJ2 = &amp;j;
int *ptrI = &amp;i;
</code></pre><p>True/False:</p><ul><li><code>if (ptrJ1 == ptrJ2) {}</code> → True</li><li><code>if (ptrJ1 == ptrI) {}</code> → False</li><li><code>if (&amp;ptrJ1 == &amp;ptrJ2) {}</code> → False</li><li><code>if (*ptrJ1 == *ptrI) {}</code> → True</li></ul><p><a href="https://pythontutor.com/visualize.html#code=%23include%20%3Ciostream%3E%0A%0Aint%20main%28%29%0A%7B%0A%20%20int%20i%20%3D%205,%20j%20%3D%205%3B%0A%20%20int%20*ptrJ1%20%3D%20%26j%3B%0A%20%20int%20*ptrJ2%20%3D%20%26j%3B%0A%20%20int%20*ptrI%20%3D%20%26i%3B%0A%20%20%0A%20%20if%20%28ptrJ1%20%3D%3D%20ptrJ2%29%20%7B%0A%20%20%20%20std%3A%3Acout%20%3C%3C%201%20%3C%3C%20&#39;%20&#39;%3B%0A%20%20%7D%0A%20%20if%20%28ptrJ1%20%3D%3D%20ptrI%29%20%7B%0A%20%20%20%20std%3A%3Acout%20%3C%3C%202%20%3C%3C%20&#39;%20&#39;%3B%0A%20%20%7D%0A%20%20if%20%28%26ptrJ1%20%3D%3D%20%26ptrJ2%29%20%7B%0A%20%20%20%20std%3A%3Acout%20%3C%3C%203%20%3C%3C%20&#39;%20&#39;%3B%0A%20%20%7D%0A%20%20if%20%28*ptrJ1%20%3D%3D%20*ptrI%29%20%7B%0A%20%20%20%20std%3A%3Acout%20%3C%3C%204%20%3C%3C%20&#39;%20&#39;%3B%0A%20%20%7D%0A%0A%20%20return%200%3B%0A%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=cpp_g%2B%2B9.3.0&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" rel="noreferrer">Click here to see the visualization for this code.</a></p><h3 id="assigning-a-value-to-a-dereferenced-pointer" tabindex="-1">Assigning a value to a <em>dereferenced</em> pointer. <a class="header-anchor" href="#assigning-a-value-to-a-dereferenced-pointer" aria-label="Permalink to “Assigning a value to a dereferenced pointer.”">​</a></h3><p>A pointer must have a value before you can <em>dereference</em> it (follow the pointer).</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Error! Override the value located in some unknown address.</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This is fine. <code>x</code> points to <code>foo</code>.</p><h3 id="pointers-to-pointers" tabindex="-1">Pointers to Pointers <a class="header-anchor" href="#pointers-to-pointers" aria-label="Permalink to “Pointers to Pointers”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;"><code>int *x = &amp;num;</code></td><td style="text-align:left;"><img src="`+m+'" alt="" width="200px" class="light-only"> <img src="'+y+'" alt="" width="200px" class="dark-only"></td></tr><tr><td style="text-align:left;"><code>double *y;</code></td><td style="text-align:left;"><img src="'+u+'" alt="" width="250px" class="light-only"> <img src="'+b+'" alt="" width="250px" class="dark-only"></td></tr><tr><td style="text-align:left;"><code>int **z = &amp;x;</code></td><td style="text-align:left;"><img src="'+E+'" alt="" width="300px" class="light-only"> <img src="'+f+`" alt="" width="300px" class="dark-only"></td></tr></tbody></table><p>An Example</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ppNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pNum;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Then:</p><ul><li><p><code>ppNum</code> stores the memory location of <code>pNum</code>.</p></li><li><p><code>*ppNum</code> stores the memory location of <code>num</code>.</p></li><li><p><code>**ppNum</code> equals <code>5</code>.</p></li></ul><h2 id="array-pointers" tabindex="-1">Array Pointers <a class="header-anchor" href="#array-pointers" aria-label="Permalink to “Array Pointers”">​</a></h2><h3 id="declaring-arrays" tabindex="-1">Declaring Arrays <a class="header-anchor" href="#declaring-arrays" aria-label="Permalink to “Declaring Arrays”">​</a></h3><ul><li><p>Typical C/C++ array declarations.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // stack</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // stack</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">intPtr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // heap</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>Typical Java array declarations:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[][] arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="allocation-of-stack-and-heap-space-for-an-array" tabindex="-1">Allocation of Stack and Heap Space for an Array <a class="header-anchor" href="#allocation-of-stack-and-heap-space-for-an-array" aria-label="Permalink to “Allocation of Stack and Heap Space for an Array”">​</a></h3><figure class="light-only"><img src="`+h+'" alt="" width="500px" class="light-only"><figcaption>Memory allocated on the stack and heap for <code>int *arr = new int[10];</code></figcaption></figure><figure class="dark-only"><img src="'+o+'" alt="" width="500px" class="dark-only"><figcaption>Memory allocated on the stack and heap for <code>int *arr = new int[10];</code></figcaption></figure><h3 id="pointers-and-arrays" tabindex="-1">Pointers and Arrays <a class="header-anchor" href="#pointers-and-arrays" aria-label="Permalink to “Pointers and Arrays”">​</a></h3><ul><li><p>The identifier of an array on the stack is basically a<br><em><strong>const pointer</strong></em> pointing at the beginning of the array.</p></li><li><p>You can use the <code>[]</code> operator with pointers!</p></li><li><p>Example: <code>int A[5];</code></p><ul><li>Creates a memory block of 5 integers on the stack (5 × 4 bytes).</li><li>A (the pointer) points at the beginning of the array. <code>A</code> → <code>A[0]</code>. <code>(A == &amp;A[0])</code><br><img src="'+x+'" alt="Array of 5 elements." width="250px" class="light-only"><img src="'+Q+`" alt="Array of 5 elements." width="250px" class="dark-only"></li></ul></li><li><p>Example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // x is the address of a[2]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+A+'" alt="Pointer to 3 element in array." width="500px" class="light-only"><img src="'+T+`" alt="Pointer to 3 element in array." width="500px" class="dark-only"></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // x[i] is the same as a[i+2]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+w+'" alt="Pointer to 3 element in array." width="500px" class="light-only"><img src="'+F+`" alt="Pointer to 3 element in array." width="500px" class="dark-only"></p></li></ul><h3 id="pointer-arithmetic" tabindex="-1">Pointer Arithmetic <a class="header-anchor" href="#pointer-arithmetic" aria-label="Permalink to “Pointer Arithmetic”">​</a></h3><ul><li><p>Integer arithmetic (<code>+</code>, <code>-</code>, <code>++</code>, <code>–</code>, <code>+=</code>, <code>-=</code>) works with pointers.</p></li><li><p>Increment updates the address to the “next” element.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+v+'" alt="Pointer Arithmetic Example with an Array." width="500px" class="light-only"><img src="'+C+'" alt="Pointer Arithmetic Example with an Array." width="500px" class="dark-only"></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">3</span><br></div></div><p><img src="'+D+'" alt="Pointer Arithmetic Example with an Array." width="500px" class="light-only"><img src="'+B+`" alt="Pointer Arithmetic Example with an Array." width="500px" class="dark-only"></p></li></ul><h2 id="memory-errors" tabindex="-1">Memory Errors <a class="header-anchor" href="#memory-errors" aria-label="Permalink to “Memory Errors”">​</a></h2><h3 id="pointer-pitfalls" tabindex="-1">Pointer Pitfalls <a class="header-anchor" href="#pointer-pitfalls" aria-label="Permalink to “Pointer Pitfalls”">​</a></h3><p>Assigning values to uninitialized, null, or deleted pointers:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Using the above statements will result in a <em>segmentation fault</em> or undefined behavior!</p><h3 id="memory-leaks" tabindex="-1">Memory Leaks <a class="header-anchor" href="#memory-leaks" aria-label="Permalink to “Memory Leaks”">​</a></h3><p>Memory leak is when you remove the reference to the memory block, before deleting the block itself.</p><p>Example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // p points somewhere</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // p is an int value&#39;s address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // p points to null.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>Result?</p></li><li><p><strong>Memory Leek! (Orphan Blocks)</strong><br> Must free memory block before changing reference.</p></li><li><p>A memory leak can diminish the performance of the computer by reducing the amount of available memory.</p></li><li><p>Eventually, in the worst case, too much of the available memory may become allocated</p></li><li><p>and all or part of the system or devices stops working correctly, the application fails, or the system slows down.</p></li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>Use Valgrind with <code>--leak-check=yes</code> option if your implementation has memory leaks.<br> Reference the <a href="https://valgrind.org/docs/manual/manual.html" target="_blank" rel="noreferrer">Valgrind User Manual</a>, <a href="https://valgrind.org/docs/manual/quick-start.html" target="_blank" rel="noreferrer">The Valgrind Quick Start Guide</a>, or a <a href="https://valgrind.org/downloads/guis.html" target="_blank" rel="noreferrer">Graphical User Interfaces</a>.</p><p>* This is why the <code>-g</code> flag is used when debugging!</p></div><h3 id="problem-multiple-pointers-to-the-same-address" tabindex="-1">Problem: Multiple Pointers to the Same Address <a class="header-anchor" href="#problem-multiple-pointers-to-the-same-address" aria-label="Permalink to “Problem: Multiple Pointers to the Same Address”">​</a></h3><ul><li><p>A second problem can occur when multiple pointers are assigned to a block of heap memory.</p></li><li><p>The block may be deleted and one of the pointers set to <em>null</em>, but the other pointers still exist.</p></li><li><p>If the runtime system reassigns the memory to another object, the original pointers pose a danger.</p></li></ul><h3 id="dangling-pointer-a-pointer-that-points-to-an-invalid-location" tabindex="-1">Dangling Pointer: A pointer that points to an invalid location. <a class="header-anchor" href="#dangling-pointer-a-pointer-that-points-to-an-invalid-location" aria-label="Permalink to “Dangling Pointer: A pointer that points to an invalid location.”">​</a></h3><p>Example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Create two pointers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Allocate an int on the heap.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Points to the same address.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Sets the on the heap to 4.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Frees the heap memory.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Illegal assignment!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><p><code>p</code> and <code>q</code> point to the same location.</p></li><li><p>When <code>q</code> is deleted, <code>p</code> becomes a dangling pointer!</p></li></ul><h2 id="garbage-collection" tabindex="-1">Garbage Collection <a class="header-anchor" href="#garbage-collection" aria-label="Permalink to “Garbage Collection”">​</a></h2><h3 id="memory-leaks-and-garbage-collection" tabindex="-1">Memory Leaks and Garbage Collection <a class="header-anchor" href="#memory-leaks-and-garbage-collection" aria-label="Permalink to “Memory Leaks and Garbage Collection”">​</a></h3><p>The popularity of <em>object-oriented programming</em> has meant more emphasis on heap storage management.<br> Objects are considered active or inactive.</p><ul><li><p><em><strong>Active</strong></em> objects: blocks <em>accessible</em> through a pointer or reference.</p></li><li><p><em><strong>Inactive</strong></em> objects: <em>inaccessible</em> blocks; no reference exists (also called (<em><strong>orphans</strong></em> or <em><strong>garbage</strong></em>).</p></li></ul><p>The terms <em>accessible</em> and <em>inaccessible</em> may be more figurative than objectively true.</p><h3 id="garbage-collection-1" tabindex="-1">Garbage Collection <a class="header-anchor" href="#garbage-collection-1" aria-label="Permalink to “Garbage Collection”">​</a></h3><ul><li><p>All inaccessible blocks of storage are identified and returned to the free list.</p></li><li><p>The heap may also be <strong>compacted</strong> at this time: allocated space is compressed into one end of the heap, leaving all free space in a large block at the other end.</p></li><li><p>C &amp; C++ leave it to the programmer — if an unused storage block isn’t explicitly freed by, it becomes garbage.</p><ul><li>You can get C++ garbage collectors, but they aren’t standard.</li></ul></li><li><p>Java, Python, Perl, and other scripting languages perform garbage collection.</p><ul><li>Python, etc. also have automatic allocation, so the “new” operator is not needed).</li></ul></li><li><p>Garbage collection was pioneered by languages like <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)" target="_blank" rel="noreferrer">Lisp</a>, which constantly creates and destroys linked lists.</p></li><li><p>C++ includes <a href="https://en.cppreference.com/w/cpp/memory" target="_blank" rel="noreferrer">smart pointers</a>, enabling automatic object lifetime management.</p></li></ul><h2 id="review" tabindex="-1">Review <a class="header-anchor" href="#review" aria-label="Permalink to “Review”">​</a></h2><ul><li><p>Three types of memory storage:</p><ul><li>Static</li><li>Stack</li><li>Heap</li></ul></li><li><p>Problems with heap storage:</p><ul><li><p>Memory leaks (garbage): failure to free storage when pointers (references) are reassigned.</p></li><li><p>Dangling pointers: when storage is freed, but references to the storage still exist.</p></li></ul></li></ul><h3 id="allocation-of-stack-and-heap-space-for-an-array-1" tabindex="-1">Allocation of Stack and Heap Space for an Array <a class="header-anchor" href="#allocation-of-stack-and-heap-space-for-an-array-1" aria-label="Permalink to “Allocation of Stack and Heap Space for an Array”">​</a></h3><figure class="light-only"><img src="`+h+'" alt="" width="500px" class="light-only"><figcaption>Memory allocated on the stack and heap for <code>int *arr = new int[10];</code></figcaption></figure><figure class="dark-only"><img src="'+o+'" alt="" width="500px" class="dark-only"><figcaption>Memory allocated on the stack and heap for <code>int *arr = new int[10];</code></figcaption></figure><h3 id="garbage" tabindex="-1">Garbage <a class="header-anchor" href="#garbage" aria-label="Permalink to “Garbage”">​</a></h3><ul><li><p><em><strong>Garbage</strong></em>: any block of heap memory that cannot be accessed by the program (i.e., there is no stack pointer to the block) but in which the runtime system thinks is in use.</p></li><li><p>Garbage is created in several ways:</p><ul><li><p>A function ends without returning the space allocated to a local array or other dynamic variable. The pointer is gone.</p></li><li><p>A node is deleted from a linked data structure, but isn’t freed.</p></li><li><p>…</p></li></ul></li></ul><h3 id="terminology" tabindex="-1">Terminology <a class="header-anchor" href="#terminology" aria-label="Permalink to “Terminology”">​</a></h3><ul><li><p>A <strong>dangling pointer</strong> (or dangling reference, or widow) is a pointer (reference) that contains the address of previously deallocated/freed heap space.</p></li><li><p>An <strong>orphan (or garbage)</strong> is a block of allocated heap memory that is no longer accessible through any pointer.</p></li><li><p>A <strong>memory leak</strong> is a gradual loss of available memory due to the creation of garbage.</p></li></ul><h2 id="lab-3-pointers" tabindex="-1">Lab 3: Pointers <a class="header-anchor" href="#lab-3-pointers" aria-label="Permalink to “Lab 3: Pointers”">​</a></h2><p>Complete Lab 3 on Blackboard.</p>',76))])}const us=d(M,[["render",hs]]);export{ys as __pageData,us as default};
